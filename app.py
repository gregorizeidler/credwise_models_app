# app.py

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc, precision_recall_curve
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import shap
import pickle
import os
# Novas importa√ß√µes para modelos adicionais
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import cross_val_score

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="CreditWise - Credit Scoring Engine",
    page_icon="üí∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para criar dados sint√©ticos de clientes
def generate_synthetic_data(n_samples=1000, random_state=42):
    np.random.seed(random_state)
    
    # Caracter√≠sticas
    idade = np.random.randint(18, 75, n_samples)
    renda_anual = np.random.normal(60000, 30000, n_samples)
    tempo_emprego = np.random.randint(0, 40, n_samples)
    tempo_residencia = np.random.randint(0, 20, n_samples)
    qtd_contas = np.random.randint(0, 10, n_samples)
    divida_total = np.random.normal(20000, 15000, n_samples)
    taxa_utilizacao_credito = np.clip(np.random.normal(0.5, 0.3, n_samples), 0, 1)
    consultas_credito = np.random.randint(0, 10, n_samples)
    atrasos_pagamento = np.random.randint(0, 12, n_samples)
    historico_pagamento = np.random.randint(0, 100, n_samples)
    
    # Gerando a vari√°vel alvo (bom pagador vs mau pagador)
    # Criando uma rela√ß√£o l√≥gica entre as caracter√≠sticas e o target
    probabilidade = (
        - 0.01 * atrasos_pagamento 
        + 0.005 * historico_pagamento 
        - 0.5 * taxa_utilizacao_credito
        + 0.0000015 * renda_anual
        + 0.01 * tempo_emprego
        - 0.05 * consultas_credito
    )
    
    probabilidade = 1 / (1 + np.exp(-probabilidade))  # Transforma√ß√£o log√≠stica
    target = (np.random.random(n_samples) < probabilidade).astype(int)
    
    # Criando o DataFrame
    data = pd.DataFrame({
        'idade': idade,
        'renda_anual': renda_anual,
        'tempo_emprego': tempo_emprego,
        'tempo_residencia': tempo_residencia,
        'qtd_contas': qtd_contas,
        'divida_total': divida_total,
        'taxa_utilizacao_credito': taxa_utilizacao_credito,
        'consultas_credito': consultas_credito,
        'atrasos_pagamento': atrasos_pagamento,
        'historico_pagamento': historico_pagamento,
        'bom_pagador': target
    })
    
    return data

# Fun√ß√£o para gerar dados sint√©ticos de cobran√ßa
def generate_collection_data(data, random_state=42):
    np.random.seed(random_state)
    
    # Filtrar apenas clientes maus pagadores
    bad_payers = data[data['bom_pagador'] == 0].copy()
    
    if len(bad_payers) == 0:
        # Se n√£o houver maus pagadores, crie alguns artificialmente
        bad_payers = data.copy().iloc[:100]
    
    # Adicionar informa√ß√µes de cobran√ßa
    n_samples = len(bad_payers)
    
    # Dias de atraso
    dias_atraso = np.random.randint(10, 180, n_samples)
    
    # Valor em atraso
    valor_atraso = np.random.normal(5000, 3000, n_samples)
    valor_atraso = np.clip(valor_atraso, 500, 20000)
    
    # N√∫mero de contatos realizados
    contatos_realizados = np.random.randint(0, 10, n_samples)
    
    # Resposta a contatos (0: sem resposta, 1: respondeu)
    resposta_contato = np.random.binomial(1, 0.6, n_samples)
    
    # Estrat√©gia de cobran√ßa (aleat√≥ria)
    estrategias = ['SMS', 'E-mail', 'Liga√ß√£o', 'Carta', 'Visita']
    estrategia_cobranca = np.random.choice(estrategias, n_samples)
    
    # Proposta de negocia√ß√£o (0: n√£o feita, 1: feita)
    proposta_negociacao = np.random.binomial(1, 0.4, n_samples)
    
    # Resultado de cobran√ßa (vari√°vel target)
    # 0: N√£o recuperado, 1: Negociado, 2: Pago integralmente
    base_proba = 0.3  # probabilidade base de sucesso
    
    # Modelo para definir resultado
    prob_ajuste = (
        - 0.001 * dias_atraso 
        + 0.02 * (contatos_realizados > 3)
        + 0.15 * resposta_contato
        + 0.25 * proposta_negociacao
        - 0.00005 * valor_atraso
    )
    
    # Ajustar pela estrat√©gia
    estrategia_bonus = {
        'SMS': 0.05,
        'E-mail': 0.02,
        'Liga√ß√£o': 0.15,
        'Carta': 0.08,
        'Visita': 0.25
    }
    
    for i, estrategia in enumerate(estrategia_cobranca):
        prob_ajuste[i] += estrategia_bonus[estrategia]
    
    # Calcular probabilidade final
    prob_sucesso = np.clip(base_proba + prob_ajuste, 0.01, 0.95)
    
    # Determinar resultados
    resultados = np.zeros(n_samples)
    for i in range(n_samples):
        rand = np.random.random()
        if rand < prob_sucesso[i]:
            if rand < prob_sucesso[i] * 0.7:  # 70% dos sucessos s√£o negocia√ß√µes
                resultados[i] = 1  # Negociado
            else:
                resultados[i] = 2  # Pago integralmente
    
    # Criar DataFrame de cobran√ßa
    collection_data = bad_payers.reset_index(drop=True).copy()
    collection_data['dias_atraso'] = dias_atraso
    collection_data['valor_atraso'] = valor_atraso
    collection_data['contatos_realizados'] = contatos_realizados
    collection_data['resposta_contato'] = resposta_contato
    collection_data['estrategia_cobranca'] = estrategia_cobranca
    collection_data['proposta_negociacao'] = proposta_negociacao
    collection_data['resultado'] = resultados
    
    # Adicionar informa√ß√µes √∫teis
    collection_data['resultado_texto'] = collection_data['resultado'].map({
        0: 'N√£o recuperado',
        1: 'Negociado',
        2: 'Pago integralmente'
    })
    
    collection_data['sucesso_cobranca'] = collection_data['resultado'] > 0
    
    return collection_data

# Fun√ß√£o para treinar o modelo de score de cr√©dito
def train_credit_scoring_model(data):
    # Divis√£o entre features e target
    X = data.drop('bom_pagador', axis=1)
    y = data['bom_pagador']
    
    # Divis√£o entre treino e teste
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42
    )
    
    # Normaliza√ß√£o dos dados
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    # Treinamento do modelo
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train_scaled, y_train)
    
    # Avalia√ß√£o do modelo
    y_pred = model.predict(X_test_scaled)
    report = classification_report(y_test, y_pred, output_dict=True)
    
    # Calcular pontua√ß√µes de cr√©dito para o conjunto de teste
    credit_scores = model.predict_proba(X_test_scaled)[:, 1] * 1000
    
    return model, scaler, report, X_test, y_test, credit_scores

# T√≠tulo principal
st.title("üí≥ CreditWise - Credit Scoring Engine")
st.markdown("### Sistema Inteligente de Avalia√ß√£o de Cr√©dito")

# Verificar se j√° existem dados ou gerar novos
if 'data' not in st.session_state:
    st.session_state.data = generate_synthetic_data(2000)
    st.session_state.show_welcome = True

if 'model' not in st.session_state or 'scaler' not in st.session_state:
    with st.spinner("Treinando modelo de credit scoring..."):
        model, scaler, report, X_test, y_test, credit_scores = train_credit_scoring_model(st.session_state.data)
        st.session_state.model = model
        st.session_state.scaler = scaler
        st.session_state.report = report
        st.session_state.X_test = X_test
        st.session_state.y_test = y_test
        st.session_state.credit_scores = credit_scores

# Menu lateral
with st.sidebar:
    st.header("Menu")
    app_mode = st.selectbox(
        "Escolha a funcionalidade:",
        ["Vis√£o Geral", "Explorar Dados", "Modelo de Cr√©dito", "Compara√ß√£o de Modelos", "Explicabilidade (SHAP)", "Simulador de Cr√©dito", "An√°lise de Cobran√ßa"]
    )
    
    st.divider()
    st.markdown("### Sobre o CreditWise")
    st.markdown("""
    O CreditWise √© um sistema de scoring de cr√©dito que utiliza
    machine learning para avaliar o risco de empr√©stimos. 
    
    Os dados utilizados s√£o sint√©ticos e servem apenas para demonstra√ß√£o.
    """)

# P√°gina inicial com vis√£o geral
if app_mode == "Vis√£o Geral":
    st.header("Bem-vindo ao CreditWise Credit Scoring Engine")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("O que √© Credit Scoring?")
        st.markdown("""
        Credit Scoring √© um m√©todo estat√≠stico usado por institui√ß√µes financeiras para avaliar 
        a probabilidade de um cliente n√£o pagar um empr√©stimo. Isso resulta em uma pontua√ß√£o 
        num√©rica que representa o risco de cr√©dito associado a um indiv√≠duo.
        """)
        
        st.subheader("Como funciona o CreditWise?")
        st.markdown("""
        1. **Coleta de Dados**: Informa√ß√µes financeiras e comportamentais do cliente
        2. **Pr√©-processamento**: Normaliza√ß√£o e tratamento dos dados
        3. **Modelagem**: Algoritmos de machine learning para prever comportamento
        4. **Scoring**: Convers√£o da probabilidade em uma pontua√ß√£o de 0-1000
        5. **Decis√£o**: Aprova√ß√£o ou recusa com base em pol√≠ticas de cr√©dito
        """)
    
    with col2:
        # Gr√°fico de distribui√ß√£o de scores
        fig = px.histogram(
            pd.DataFrame({'credit_score': st.session_state.credit_scores}), 
            x='credit_score',
            nbins=50,
            title='Distribui√ß√£o dos Credit Scores',
            labels={'credit_score': 'Credit Score', 'count': 'Frequ√™ncia'},
            color_discrete_sequence=['#3366CC']
        )
        fig.update_layout(xaxis_range=[0, 1000])
        st.plotly_chart(fig, use_container_width=True)
        
        # M√©tricas de performance do modelo
        st.metric("Acur√°cia do modelo", f"{st.session_state.report['accuracy']:.2%}")
        
        good_payers = st.session_state.data['bom_pagador'].mean()
        st.metric("Taxa de bons pagadores", f"{good_payers:.2%}")

    # Exibir exemplos de clientes
    st.subheader("Exemplos de Clientes")
    sample_clients = st.session_state.data.sample(5)
    # Converter bom_pagador para string mais informativo
    sample_clients_display = sample_clients.copy()
    sample_clients_display['bom_pagador'] = sample_clients_display['bom_pagador'].map({1: 'Bom Pagador', 0: 'Mau Pagador'})
    st.dataframe(sample_clients_display)

# Explorar dados
elif app_mode == "Explorar Dados":
    st.header("Explora√ß√£o e An√°lise de Dados")
    
    # Menu de an√°lise
    analysis_type = st.radio(
        "Selecione o tipo de an√°lise:",
        ["Estat√≠sticas Descritivas", "Distribui√ß√µes", "Correla√ß√µes", "An√°lise Bivariada"],
        horizontal=True
    )
    
    if analysis_type == "Estat√≠sticas Descritivas":
        st.subheader("Estat√≠sticas Descritivas")
        
        # Estat√≠sticas b√°sicas
        desc_stats = st.session_state.data.describe().T
        
        # Adicionar contagem de bons e maus pagadores
        good_bad_counts = st.session_state.data['bom_pagador'].value_counts()
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.dataframe(desc_stats)
        
        with col2:
            # Gr√°fico de pizza para bons/maus pagadores
            labels = ['Mau Pagador', 'Bom Pagador']
            values = [good_bad_counts.get(0, 0), good_bad_counts.get(1, 0)]
            
            fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)])
            fig.update_layout(title_text='Distribui√ß√£o de Bons e Maus Pagadores')
            st.plotly_chart(fig, use_container_width=True)
            
            # Informa√ß√µes adicionais
            st.markdown("### Observa√ß√µes:")
            st.markdown(f"- Total de registros: {len(st.session_state.data)}")
            st.markdown(f"- Propor√ß√£o de bons pagadores: {values[1]/(values[0]+values[1]):.2%}")
            st.markdown(f"- Caracter√≠sticas dispon√≠veis: {len(st.session_state.data.columns)-1}")
    
    elif analysis_type == "Distribui√ß√µes":
        st.subheader("Distribui√ß√µes das Vari√°veis")
        
        # Seletor de vari√°vel
        numeric_cols = st.session_state.data.select_dtypes(include=['float64', 'int64']).columns.tolist()
        numeric_cols.remove('bom_pagador')  # Remover a vari√°vel alvo
        
        selected_var = st.selectbox("Selecione a vari√°vel para visualizar:", numeric_cols)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Histograma
            fig = px.histogram(
                st.session_state.data, 
                x=selected_var,
                color="bom_pagador",
                barmode="overlay",
                color_discrete_map={0: "#FF4B4B", 1: "#2EB086"},
                labels={"bom_pagador": "Status"},
                category_orders={"bom_pagador": [0, 1]},
                title=f"Distribui√ß√£o de {selected_var} por status de pagamento"
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Box plot
            fig = px.box(
                st.session_state.data, 
                x="bom_pagador", 
                y=selected_var,
                color="bom_pagador",
                color_discrete_map={0: "#FF4B4B", 1: "#2EB086"},
                labels={"bom_pagador": "Status", selected_var: selected_var},
                category_orders={"bom_pagador": [0, 1]},
                title=f"Box Plot de {selected_var} por status de pagamento"
            )
            fig.update_xaxes(ticktext=["Mau Pagador", "Bom Pagador"], tickvals=[0, 1])
            st.plotly_chart(fig, use_container_width=True)
        
        # Estat√≠sticas por grupo
        st.subheader("Estat√≠sticas por Grupo")
        group_stats = st.session_state.data.groupby('bom_pagador')[selected_var].describe().reset_index()
        group_stats['bom_pagador'] = group_stats['bom_pagador'].map({0: 'Mau Pagador', 1: 'Bom Pagador'})
        st.dataframe(group_stats)
    
    elif analysis_type == "Correla√ß√µes":
        st.subheader("Matriz de Correla√ß√£o")
        
        # Calcular correla√ß√µes
        corr_matrix = st.session_state.data.corr()
        
        # Gerar heatmap
        fig, ax = plt.subplots(figsize=(10, 8))
        mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
        cmap = sns.diverging_palette(230, 20, as_cmap=True)
        
        sns.heatmap(
            corr_matrix, 
            mask=mask, 
            cmap=cmap, 
            vmax=1, 
            vmin=-1, 
            center=0,
            square=True, 
            linewidths=.5, 
            cbar_kws={"shrink": .5},
            annot=True,
            fmt=".2f"
        )
        plt.title('Matriz de Correla√ß√£o', fontsize=16)
        st.pyplot(fig)
        
        # Correla√ß√µes com a vari√°vel alvo
        st.subheader("Correla√ß√µes com status de pagamento")
        target_corr = corr_matrix['bom_pagador'].drop('bom_pagador').sort_values(ascending=False)
        
        fig = px.bar(
            x=target_corr.index, 
            y=target_corr.values,
            labels={'x': 'Caracter√≠stica', 'y': 'Correla√ß√£o'},
            title='Correla√ß√£o com Status de Pagamento',
            color=target_corr.values,
            color_continuous_scale='RdBu_r'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        with st.expander("Explica√ß√£o das correla√ß√µes"):
            st.markdown("""
            - **Correla√ß√£o positiva**: Um aumento na vari√°vel est√° associado a uma maior chance de ser um bom pagador.
            - **Correla√ß√£o negativa**: Um aumento na vari√°vel est√° associado a uma menor chance de ser um bom pagador.
            - **Correla√ß√£o pr√≥xima de zero**: A vari√°vel tem pouca ou nenhuma rela√ß√£o linear com o status de pagamento.
            """)
    
    elif analysis_type == "An√°lise Bivariada":
        st.subheader("An√°lise Bivariada")
        
        # Sele√ß√£o de vari√°veis
        numeric_cols = st.session_state.data.select_dtypes(include=['float64', 'int64']).columns.tolist()
        numeric_cols.remove('bom_pagador')  # Remover a vari√°vel alvo
        
        col1, col2 = st.columns(2)
        
        with col1:
            x_var = st.selectbox("Vari√°vel X:", numeric_cols, index=0)
        
        with col2:
            y_var = st.selectbox("Vari√°vel Y:", numeric_cols, index=1 if len(numeric_cols) > 1 else 0)
        
        # Scatter plot
        fig = px.scatter(
            st.session_state.data,
            x=x_var,
            y=y_var,
            color="bom_pagador",
            color_discrete_map={0: "#FF4B4B", 1: "#2EB086"},
            labels={x_var: x_var, y_var: y_var, "bom_pagador": "Status"},
            title=f"Rela√ß√£o entre {x_var} e {y_var} por status de pagamento",
            opacity=0.7
        )
        
        # Adicionar linhas de tend√™ncia
        fig.update_traces(marker=dict(size=8, line=dict(width=1, color='DarkSlateGrey')))
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Estat√≠sticas de correla√ß√£o
        corr_value = st.session_state.data[[x_var, y_var]].corr().iloc[0, 1]
        
        st.metric("Correla√ß√£o de Pearson", f"{corr_value:.4f}")
        
        if abs(corr_value) > 0.7:
            st.warning("H√° uma forte correla√ß√£o entre essas vari√°veis, o que pode indicar multicolinearidade.")
        
        # Quadrantes e distribui√ß√µes marginais
        with st.expander("Ver distribui√ß√µes marginais"):
            fig = px.scatter(
                st.session_state.data,
                x=x_var,
                y=y_var,
                color="bom_pagador",
                color_discrete_map={0: "#FF4B4B", 1: "#2EB086"},
                marginal_x="histogram",
                marginal_y="histogram"
            )
            st.plotly_chart(fig, use_container_width=True)

# Modelo de Cr√©dito
elif app_mode == "Modelo de Cr√©dito":
    st.header("Modelo de Credit Scoring")
    
    tab1, tab2, tab3 = st.tabs(["Performance do Modelo", "Import√¢ncia das Vari√°veis", "Distribui√ß√£o de Scores"])
    
    with tab1:
        st.subheader("M√©tricas de Performance")
        
        # Calcular matriz de confus√£o
        y_pred = st.session_state.model.predict(st.session_state.scaler.transform(st.session_state.X_test))
        cm = confusion_matrix(st.session_state.y_test, y_pred)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # M√©tricas principais
            st.metric("Acur√°cia", f"{st.session_state.report['accuracy']:.2%}")
            st.metric("Precis√£o (Classe Positiva)", f"{st.session_state.report['1']['precision']:.2%}")
            st.metric("Recall (Classe Positiva)", f"{st.session_state.report['1']['recall']:.2%}")
            st.metric("F1-Score (Classe Positiva)", f"{st.session_state.report['1']['f1-score']:.2%}")
        
        with col2:
            # Matriz de confus√£o
            fig, ax = plt.subplots(figsize=(6, 5))
            sns.heatmap(
                cm, 
                annot=True, 
                fmt='d', 
                cmap='Blues',
                xticklabels=['Negativo', 'Positivo'],
                yticklabels=['Negativo', 'Positivo']
            )
            plt.title('Matriz de Confus√£o')
            plt.xlabel('Previsto')
            plt.ylabel('Real')
            st.pyplot(fig)
        
        # Curva ROC
        st.subheader("Curva ROC")
        
        y_prob = st.session_state.model.predict_proba(st.session_state.scaler.transform(st.session_state.X_test))[:, 1]
        fpr, tpr, _ = roc_curve(st.session_state.y_test, y_prob)
        roc_auc = auc(fpr, tpr)
        
        fig = px.area(
            x=fpr, y=tpr,
            title=f'Curva ROC (AUC = {roc_auc:.2f})',
            labels=dict(x='Taxa de Falsos Positivos', y='Taxa de Verdadeiros Positivos'),
            width=700, height=500
        )
        fig.add_shape(
            type='line', line=dict(dash='dash'),
            x0=0, x1=1, y0=0, y1=1
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with tab2:
        st.subheader("Import√¢ncia das Vari√°veis")
        
        # Extrair import√¢ncia das vari√°veis do modelo
        if hasattr(st.session_state.model, 'feature_importances_'):
            # Para modelos baseados em √°rvores (Random Forest, XGBoost, etc.)
            importances = st.session_state.model.feature_importances_
            feature_names = st.session_state.X_test.columns
            
            # Criar DataFrame de import√¢ncias
            importance_df = pd.DataFrame({
                'Vari√°vel': feature_names,
                'Import√¢ncia': importances
            }).sort_values('Import√¢ncia', ascending=False)
            
            # Visualizar import√¢ncia das vari√°veis
            fig = px.bar(
                importance_df,
                x='Import√¢ncia',
                y='Vari√°vel',
                orientation='h',
                title='Import√¢ncia das Vari√°veis',
                color='Import√¢ncia',
                color_continuous_scale='Blues'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Tabela de import√¢ncia
            st.write("### Ranking de Import√¢ncia")
            importance_df['Import√¢ncia (%)'] = importance_df['Import√¢ncia'] * 100
            importance_df['Import√¢ncia (%)'] = importance_df['Import√¢ncia (%)'].apply(lambda x: f"{x:.2f}%")
            st.dataframe(importance_df[['Vari√°vel', 'Import√¢ncia (%)']])
            
            # An√°lise descritiva das principais vari√°veis
            st.write("### An√°lise das Principais Vari√°veis")
            top_features = importance_df['Vari√°vel'].head(3).tolist()
            
            for feature in top_features:
                st.write(f"#### {feature}")
                
                fig = px.histogram(
                    st.session_state.data, 
                    x=feature,
                    color="bom_pagador",
                    barmode="overlay",
                    color_discrete_map={0: "#FF4B4B", 1: "#2EB086"},
                    labels={"bom_pagador": "Status"},
                    category_orders={"bom_pagador": [0, 1]},
                    title=f"Distribui√ß√£o de {feature} por status de pagamento"
                )
                st.plotly_chart(fig, use_container_width=True)
        
        else:
            # Para modelos sem feature_importances_ (regress√£o log√≠stica, redes neurais, etc.)
            st.info("Este modelo n√£o suporta visualiza√ß√£o direta de import√¢ncia de vari√°veis. Considere usar SHAP para an√°lise de import√¢ncia.")
    
    with tab3:
        st.subheader("Distribui√ß√£o de Scores")
        
        # Histograma de distribui√ß√£o de scores
        fig = px.histogram(
            pd.DataFrame({'credit_score': st.session_state.credit_scores}),
            x='credit_score',
            nbins=50,
            title='Distribui√ß√£o dos Credit Scores',
            labels={'credit_score': 'Credit Score', 'count': 'Frequ√™ncia'},
            color_discrete_sequence=['#3366CC']
        )
        fig.update_layout(xaxis_range=[0, 1000])
        st.plotly_chart(fig, use_container_width=True)
        
        # Distribui√ß√£o por status de pagamento
        st.write("### Distribui√ß√£o por Status de Pagamento")
        
        # Criar DataFrame com scores e status real
        score_status_df = pd.DataFrame({
            'credit_score': st.session_state.credit_scores,
            'bom_pagador': st.session_state.y_test.values
        })
        
        fig = px.histogram(
            score_status_df,
            x='credit_score',
            color='bom_pagador',
            barmode='overlay',
            nbins=50,
            opacity=0.7,
            title='Distribui√ß√£o de Scores por Status',
            labels={'credit_score': 'Credit Score', 'count': 'Frequ√™ncia', 'bom_pagador': 'Status'},
            color_discrete_map={0: "#FF4B4B", 1: "#2EB086"}
        )
        fig.update_layout(xaxis_range=[0, 1000])
        st.plotly_chart(fig, use_container_width=True)
        
        # An√°lise de percentis
        st.write("### An√°lise por Percentis")
        
        percentiles = [10, 25, 50, 75, 90]
        score_percentiles = np.percentile(st.session_state.credit_scores, percentiles)
        
        percentile_df = pd.DataFrame({
            'Percentil': [f"{p}%" for p in percentiles],
            'Score': score_percentiles
        })
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.dataframe(percentile_df)
        
        with col2:
            # Defini√ß√£o das categorias de risco
            st.write("### Categorias de Risco")
            
            risk_categories = pd.DataFrame({
                'Categoria': ['Muito Alto Risco', 'Alto Risco', 'M√©dio Risco', 'Baixo Risco', 'Muito Baixo Risco'],
                'Faixa de Score': ['0-300', '301-500', '501-700', '701-850', '851-1000']
            })
            
            st.dataframe(risk_categories)

# Explicabilidade (SHAP)
elif app_mode == "Explicabilidade (SHAP)":
    st.header("Explicabilidade do Modelo com SHAP")
    
    st.write("""
    O SHAP (SHapley Additive exPlanations) √© uma t√©cnica para explicar as sa√≠das de qualquer modelo de machine learning.
    Baseado na teoria dos jogos, SHAP usa valores de Shapley para atribuir a cada caracter√≠stica sua contribui√ß√£o para a previs√£o.
    """)
    
    # Calcular valores SHAP (limitando a um subconjunto para performance)
    if 'shap_values' not in st.session_state:
        with st.spinner("Calculando valores SHAP (pode demorar um pouco)..."):
            # Usar uma amostra dos dados para c√°lculo de SHAP (por efici√™ncia)
            sample_size = min(len(st.session_state.X_test), 100)  # Reduzindo para 100 para melhor performance
            X_sample = st.session_state.X_test.sample(sample_size, random_state=42)
            X_sample_scaled = st.session_state.scaler.transform(X_sample)
            
            # Criar o explainer e calcular valores SHAP
            try:
                # Usar o explainer adequado para o modelo
                if hasattr(st.session_state.model, 'feature_importances_'):
                    # Para modelos baseados em √°rvore (como Random Forest, XGBoost)
                    explainer = shap.TreeExplainer(st.session_state.model)
                    # Calcular valores SHAP para a classe positiva (bom pagador)
                    shap_values = explainer.shap_values(X_sample_scaled)
                    
                    # Para √°rvores com valores para ambas as classes
                    if isinstance(shap_values, list):
                        # Guardar no state 
                        st.session_state.shap_values = shap_values
                        st.session_state.shap_output_dim = 'multiclass'
                        st.session_state.shap_positive_class_idx = 1  # √çndice da classe positiva
                    else:
                        # Caso em que o modelo retorna apenas uma classe
                        st.session_state.shap_values = shap_values
                        st.session_state.shap_output_dim = 'single'
                else:
                    # Para outros tipos de modelo (regress√£o log√≠stica, etc.)
                    # Aqui optamos por prever probabilidades da classe positiva
                    def model_predict(data):
                        return st.session_state.model.predict_proba(data)[:, 1]
                    
                    explainer = shap.Explainer(model_predict, X_sample_scaled)
                    shap_values = explainer(X_sample_scaled)
                    
                    st.session_state.shap_values = shap_values
                    st.session_state.shap_output_dim = 'single'
                
                # Guardar outros dados no state
                st.session_state.X_sample = X_sample
                st.session_state.X_sample_scaled = X_sample_scaled
                st.session_state.explainer = explainer
                
            except Exception as e:
                st.error(f"Erro ao calcular valores SHAP: {e}")
                st.info("Algumas visualiza√ß√µes SHAP podem n√£o estar dispon√≠veis para este tipo de modelo.")
                st.session_state.shap_values = None
    
    # Op√ß√µes de visualiza√ß√£o SHAP
    shap_plot_type = st.radio(
        "Selecione o tipo de visualiza√ß√£o SHAP:",
        ["Resumo (Global)", "Depend√™ncia", "Decis√£o Local", "Exemplo Individual"],
        horizontal=True
    )
    
    if 'shap_values' not in st.session_state or st.session_state.shap_values is None:
        st.warning("SHAP n√£o dispon√≠vel para este modelo. Tente outro modelo.")
    else:
        # Primeiro, vamos realizar diagn√≥stico dos valores SHAP
        # Isso nos ajudar√° a entender sua estrutura e mostrar informa√ß√µes √∫teis para depura√ß√£o
        if shap_plot_type == "Resumo (Global)":
            st.subheader("Resumo dos Impactos das Vari√°veis (Global)")
            
            # Mostrar m√©todo alternativo diretamente (mais confi√°vel)
            try:
                # Usar o m√©todo mais simples e confi√°vel: feature importances do modelo
                fig, ax = plt.subplots(figsize=(10, 8))
                
                if hasattr(st.session_state.model, 'feature_importances_'):
                    # Para modelos baseados em √°rvore, usar feature importances diretas
                    importances = st.session_state.model.feature_importances_
                    feature_names = st.session_state.X_sample.columns
                    
                    # Criar DataFrame de import√¢ncias e ordenar
                    importance_df = pd.DataFrame({
                        'Feature': feature_names,
                        'Importance': importances
                    }).sort_values('Importance', ascending=False)
                    
                    # Criar gr√°fico de barras
                    sns.barplot(x='Importance', y='Feature', data=importance_df, ax=ax)
                    ax.set_title('Import√¢ncia das Vari√°veis (Feature Importance)')
                    ax.set_xlabel('Import√¢ncia')
                    ax.set_ylabel('Vari√°vel')
                    
                    # Adicionar anota√ß√µes de porcentagem
                    total_importance = importances.sum()
                    for i, row in enumerate(importance_df.itertuples()):
                        percentage = (row.Importance / total_importance) * 100
                        ax.text(row.Importance + 0.01, i, f"{percentage:.1f}%", va='center')
                    
                    st.pyplot(fig)
                    
                    # Mostrar tabela detalhada
                    importance_df['Import√¢ncia (%)'] = importance_df['Importance'].apply(lambda x: f"{(x/total_importance)*100:.2f}%")
                    st.dataframe(importance_df[['Feature', 'Import√¢ncia (%)']])
                    
                else:
                    # Para outros tipos de modelos
                    st.info("Este modelo n√£o suporta feature importances diretas. Calculando import√¢ncia baseada nos valores SHAP.")
                    
                    # Calcular import√¢ncia baseada nos valores absolutos m√©dios de SHAP
                    if st.session_state.shap_output_dim == 'multiclass':
                        # Para modelos com m√∫ltiplas classes
                        shap_values_arr = np.abs(st.session_state.shap_values[st.session_state.shap_positive_class_idx])
                        mean_abs_shap = np.mean(shap_values_arr, axis=0)
                    else:
                        # Para modelos com sa√≠da √∫nica
                        try:
                            shap_values_arr = np.abs(st.session_state.shap_values.values)  
                            mean_abs_shap = np.mean(shap_values_arr, axis=0)
                        except:
                            shap_values_arr = np.abs(st.session_state.shap_values)
                            mean_abs_shap = np.mean(shap_values_arr, axis=0)
                    
                    # Criar DataFrame de import√¢ncias
                    feature_names = st.session_state.X_sample.columns
                    importance_df = pd.DataFrame({
                        'Feature': feature_names,
                        'Importance': mean_abs_shap
                    }).sort_values('Importance', ascending=False)
                    
                    # Criar gr√°fico de barras
                    sns.barplot(x='Importance', y='Feature', data=importance_df, ax=ax)
                    ax.set_title('Import√¢ncia das Vari√°veis (Baseada em SHAP)')
                    ax.set_xlabel('Import√¢ncia M√©dia Absoluta (SHAP)')
                    ax.set_ylabel('Vari√°vel')
                    
                    # Adicionar anota√ß√µes de porcentagem
                    total_importance = mean_abs_shap.sum()
                    for i, row in enumerate(importance_df.itertuples()):
                        percentage = (row.Importance / total_importance) * 100
                        ax.text(row.Importance + 0.01, i, f"{percentage:.1f}%", va='center')
                    
                    st.pyplot(fig)
                
                # Interpreta√ß√£o
                st.write("""
                ### Interpreta√ß√£o da Import√¢ncia das Vari√°veis
                
                Este gr√°fico mostra a import√¢ncia relativa de cada vari√°vel para o modelo:
                - Quanto maior a barra, mais impacto a vari√°vel tem nas previs√µes
                - Porcentagens indicam a contribui√ß√£o relativa de cada vari√°vel
                
                Vari√°veis com maior import√¢ncia devem ser monitoradas com mais aten√ß√£o, pois t√™m maior impacto no score de cr√©dito.
                """)
                
            except Exception as e:
                st.error(f"Erro ao gerar import√¢ncia das vari√°veis: {e}")
                st.info("Visualiza√ß√£o alternativa n√£o dispon√≠vel para este modelo.")
        
        elif shap_plot_type == "Depend√™ncia":
            st.subheader("An√°lise de Depend√™ncia SHAP")
            
            # M√©todo simplificado para an√°lise de depend√™ncia
            try:
                # Selecionar vari√°vel para an√°lise de depend√™ncia
                feature_names = st.session_state.X_sample.columns.tolist()
                selected_feature = st.selectbox("Selecione uma vari√°vel para an√°lise:", feature_names)
                
                # Encontrar o √≠ndice da feature selecionada
                feature_idx = feature_names.index(selected_feature)
                
                # Obter dados para a an√°lise
                X_values = st.session_state.X_sample[selected_feature].values
                
                # Verificar se X_values tem forma adequada
                if len(X_values.shape) > 1:
                    X_values = X_values.flatten()
                
                # Aqui vamos diagnosticar a estrutura dos valores SHAP para depura√ß√£o
                if st.session_state.shap_output_dim == 'multiclass':
                    st.write(f"Tipo de modelo: multiclass")
                    shap_values_arr = st.session_state.shap_values[st.session_state.shap_positive_class_idx]
                    st.write(f"Shape dos valores SHAP: {shap_values_arr.shape}")
                else:
                    st.write(f"Tipo de modelo: single")
                    try:
                        shap_values_arr = st.session_state.shap_values.values
                        st.write(f"Shape dos valores SHAP (values): {shap_values_arr.shape}")
                    except:
                        shap_values_arr = st.session_state.shap_values
                        st.write(f"Shape dos valores SHAP (direct): {shap_values_arr.shape}")
                
                st.write(f"Shape da feature X: {X_values.shape}")
                
                # Garantir que os valores SHAP t√™m o mesmo tamanho que os dados de entrada
                # Isso pode ocorrer quando os valores SHAP s√£o calculados para m√∫ltiplas classes
                if st.session_state.shap_output_dim == 'multiclass':
                    # Para modelos com valores para m√∫ltiplas classes
                    shap_values_arr = st.session_state.shap_values[st.session_state.shap_positive_class_idx]
                    
                    # Verificar se √© um array 2D com a dimens√£o correta
                    if len(shap_values_arr.shape) > 1:
                        if shap_values_arr.shape[0] == len(X_values) and shap_values_arr.shape[1] > feature_idx:
                            y_values = shap_values_arr[:, feature_idx]
                        else:
                            # Se as dimens√µes n√£o correspondem, provavelmente temos uma incompatibilidade
                            st.error(f"Incompatibilidade de dimens√µes: SHAP shape {shap_values_arr.shape}, X shape {X_values.shape}")
                            st.warning("Tentando redimensionar para corresponder...")
                            
                            # Tentar pegar apenas os primeiros elementos para corresponder
                            if shap_values_arr.shape[0] > len(X_values):
                                shap_values_arr = shap_values_arr[:len(X_values)]
                            
                            if shap_values_arr.shape[1] > feature_idx:
                                y_values = shap_values_arr[:, feature_idx]
                            else:
                                st.error(f"√çndice de feature {feature_idx} fora dos limites {shap_values_arr.shape[1]}")
                                st.stop()
                    else:
                        y_values = shap_values_arr  # Array 1D
                else:
                    # Para modelos com uma sa√≠da
                    try:
                        # Tente acessar o atributo .values (para objetos SHAP mais recentes)
                        shap_values_arr = st.session_state.shap_values.values
                        
                        # Verificar se √© um array 2D com a dimens√£o correta
                        if len(shap_values_arr.shape) > 1:
                            if shap_values_arr.shape[0] == len(X_values) and shap_values_arr.shape[1] > feature_idx:
                                y_values = shap_values_arr[:, feature_idx]
                            else:
                                # Se as dimens√µes n√£o correspondem, provavelmente temos uma incompatibilidade
                                st.error(f"Incompatibilidade de dimens√µes: SHAP shape {shap_values_arr.shape}, X shape {X_values.shape}")
                                st.warning("Tentando redimensionar para corresponder...")
                                
                                # Tentar pegar apenas os primeiros elementos para corresponder
                                if shap_values_arr.shape[0] > len(X_values):
                                    shap_values_arr = shap_values_arr[:len(X_values)]
                                
                                if shap_values_arr.shape[1] > feature_idx:
                                    y_values = shap_values_arr[:, feature_idx]
                                else:
                                    st.error(f"√çndice de feature {feature_idx} fora dos limites {shap_values_arr.shape[1]}")
                                    st.stop()
                        else:
                            y_values = shap_values_arr  # Array 1D
                    except:
                        # Se n√£o tiver .values, tente usar diretamente
                        shap_values_arr = st.session_state.shap_values
                        
                        # Verificar se √© um array 2D com a dimens√£o correta
                        if len(shap_values_arr.shape) > 1:
                            if shap_values_arr.shape[0] == len(X_values) and shap_values_arr.shape[1] > feature_idx:
                                y_values = shap_values_arr[:, feature_idx]
                            else:
                                # Se as dimens√µes n√£o correspondem, provavelmente temos uma incompatibilidade
                                st.error(f"Incompatibilidade de dimens√µes: SHAP shape {shap_values_arr.shape}, X shape {X_values.shape}")
                                st.warning("Tentando redimensionar para corresponder...")
                                
                                # Tentar pegar apenas os primeiros elementos para corresponder
                                if shap_values_arr.shape[0] > len(X_values):
                                    shap_values_arr = shap_values_arr[:len(X_values)]
                                
                                if len(shap_values_arr) > 0 and shap_values_arr.shape[1] > feature_idx:
                                    y_values = shap_values_arr[:, feature_idx]
                                else:
                                    st.error(f"√çndice de feature {feature_idx} fora dos limites ou array vazio")
                                    st.stop()
                        else:
                            y_values = shap_values_arr  # Array 1D
                
                # Verificar se y_values tem forma adequada
                if hasattr(y_values, 'shape') and len(y_values.shape) > 1:
                    y_values = y_values.flatten()
                
                # Verificar se os arrays t√™m o mesmo tamanho
                if len(X_values) != len(y_values):
                    st.error(f"Erro: X tem {len(X_values)} elementos e y tem {len(y_values)} elementos.")
                    st.warning("Redimensionando arrays para corresponder ao menor tamanho...")
                    
                    # Garantir que os arrays tenham o mesmo tamanho
                    min_size = min(len(X_values), len(y_values))
                    X_values = X_values[:min_size]
                    y_values = y_values[:min_size]
                
                # Exibir tamanhos finais para depura√ß√£o
                st.write(f"Tamanhos finais: X = {len(X_values)}, y = {len(y_values)}")
                
                # Criar scatter plot
                fig, ax = plt.subplots(figsize=(10, 7))
                
                # Usar cores para distinguir impacto positivo e negativo
                colors = ['#2EB086' if v > 0 else '#FF4B4B' for v in y_values]
                sizes = [30 + 20 * abs(v) for v in y_values]  # Tamanho varia com magnitude
                
                ax.scatter(X_values, y_values, c=colors, s=sizes, alpha=0.7)
                
                # Adicionar linha de tend√™ncia
                z = np.polyfit(X_values, y_values, 1)
                p = np.poly1d(z)
                x_range = np.linspace(min(X_values), max(X_values), 100)
                ax.plot(x_range, p(x_range), "k--", alpha=0.7, linewidth=2)
                
                # Adicionar linha horizontal em y=0
                ax.axhline(y=0, color='gray', linestyle='-', alpha=0.3)
                
                # Configurar gr√°fico
                ax.set_xlabel(selected_feature)
                ax.set_ylabel(f'Impacto SHAP para {selected_feature}')
                ax.set_title(f'An√°lise de Depend√™ncia para {selected_feature}')
                
                # Adicionar legendas e anota√ß√µes
                ax.annotate(f"Tend√™ncia: y = {z[0]:.4f}x + {z[1]:.4f}", 
                           xy=(0.02, 0.95), xycoords='axes fraction',
                           bbox=dict(boxstyle="round,pad=0.3", fc='white', alpha=0.8))
                
                # Exibir gr√°fico
                st.pyplot(fig)
                
                # Interpreta√ß√£o da depend√™ncia
                trend_direction = "positiva" if z[0] > 0 else "negativa"
                st.write(f"""
                ### Interpreta√ß√£o da Depend√™ncia para {selected_feature}
                
                Este gr√°fico mostra como valores diferentes de {selected_feature} impactam o score:
                
                - **Tend√™ncia {trend_direction}**: {'Valores maiores tendem a aumentar' if z[0] > 0 else 'Valores maiores tendem a reduzir'} o score
                - **Pontos verdes**: Valores que contribuem positivamente para o score
                - **Pontos vermelhos**: Valores que contribuem negativamente para o score
                - **Tamanho dos pontos**: Indica a magnitude da contribui√ß√£o
                
                A linha pontilhada mostra a tend√™ncia geral da rela√ß√£o.
                """)
                
                # Adicionar estat√≠sticas sobre a vari√°vel
                st.write("### Estat√≠sticas da Vari√°vel")
                stats_df = pd.DataFrame({
                    'Estat√≠stica': ['M√©dia', 'Mediana', 'M√≠nimo', 'M√°ximo', 'Desvio Padr√£o', 'Correla√ß√£o com SHAP'],
                    'Valor': [
                        f"{X_values.mean():.2f}",
                        f"{np.median(X_values):.2f}",
                        f"{X_values.min():.2f}",
                        f"{X_values.max():.2f}",
                        f"{X_values.std():.2f}",
                        f"{np.corrcoef(X_values, y_values)[0,1]:.2f}"
                    ]
                })
                st.dataframe(stats_df)
                
            except Exception as e:
                st.error(f"Erro ao gerar an√°lise de depend√™ncia: {e}")
                st.info("Tente selecionar outra vari√°vel ou utilizar outro tipo de visualiza√ß√£o.")
        
        elif shap_plot_type == "Decis√£o Local":
            st.subheader("Explica√ß√£o de Decis√µes Locais")
            
            try:
                # Selecionar amostra aleat√≥ria
                random_idx = st.slider("Selecione um exemplo:", 0, len(st.session_state.X_sample) - 1, 0)
                
                # Obter dados do exemplo
                example_data = st.session_state.X_sample.iloc[random_idx].to_frame().reset_index()
                example_data.columns = ['Caracter√≠stica', 'Valor']
                
                # Exibir dados do exemplo
                st.write("### Dados do Exemplo Selecionado")
                st.dataframe(example_data)
                
                # Calcular a previs√£o do modelo para este exemplo
                example_scaled = st.session_state.X_sample_scaled[random_idx].reshape(1, -1)
                example_prediction = st.session_state.model.predict_proba(example_scaled)[0, 1]
                example_class = 1 if example_prediction > 0.5 else 0
                
                # Exibir previs√£o
                pred_color = "#2EB086" if example_class == 1 else "#FF4B4B"
                pred_label = "Bom Pagador" if example_class == 1 else "Mau Pagador"
                
                col1, col2 = st.columns(2)
                with col1:
                    st.metric(
                        "Probabilidade de Bom Pagador", 
                        f"{example_prediction:.2%}", 
                        delta=f"{example_prediction-0.5:.2%} vs. limiar 50%"
                    )
                with col2:
                    st.markdown(f"### Classifica√ß√£o: <span style='color:{pred_color}'>{pred_label}</span>", unsafe_allow_html=True)
                
                # Obter valores SHAP para o exemplo
                feature_names = st.session_state.X_sample.columns.tolist()
                
                try:
                    # Primeiramente, capturar o tipo e formato dos valores SHAP
                    if st.session_state.shap_output_dim == 'multiclass':
                        # Para modelos com m√∫ltiplas classes
                        shap_values_arr = st.session_state.shap_values[st.session_state.shap_positive_class_idx]
                        if len(shap_values_arr.shape) > 1:
                            shap_example = shap_values_arr[random_idx, :]
                        else:
                            shap_example = shap_values_arr[random_idx]
                    else:
                        # Para modelos com uma sa√≠da
                        try:
                            shap_values_arr = st.session_state.shap_values.values
                            if len(shap_values_arr.shape) > 1:
                                shap_example = shap_values_arr[random_idx, :]
                            else:
                                shap_example = shap_values_arr[random_idx]
                        except:
                            shap_values_arr = st.session_state.shap_values
                            if len(shap_values_arr.shape) > 1:
                                shap_example = shap_values_arr[random_idx, :]
                            else:
                                shap_example = shap_values_arr[random_idx]
                    
                    # Verificar se shap_example tem a forma correta e adapt√°-la se necess√°rio
                    if hasattr(shap_example, 'shape') and len(shap_example.shape) > 1:
                        shap_example = shap_example.flatten()
                    
                    # Criar DataFrame para visualiza√ß√£o
                    shap_df = pd.DataFrame({
                        'Feature': feature_names,
                        'SHAP value': shap_example
                    }).sort_values('SHAP value', key=abs, ascending=False)
                    
                    # Criar gr√°fico de barras
                    fig, ax = plt.subplots(figsize=(12, 6))
                    
                    # Definir cores com base no sinal do valor SHAP
                    colors = ['#2EB086' if x > 0 else '#FF4B4B' for x in shap_df['SHAP value']]
                    
                    # Mostrar apenas as top 10 caracter√≠sticas para clareza
                    top_n = min(10, len(shap_df))
                    
                    # Criar gr√°fico de barras horizontal
                    bars = ax.barh(
                        np.arange(top_n), 
                        shap_df['SHAP value'].head(top_n),
                        color=colors[:top_n],
                        alpha=0.8
                    )
                    
                    # Adicionar r√≥tulos e t√≠tulo
                    ax.set_yticks(np.arange(top_n))
                    ax.set_yticklabels(shap_df['Feature'].head(top_n))
                    ax.set_title('Top 10 Vari√°veis que Impactam esta Decis√£o')
                    ax.set_xlabel('Impacto no Score (Valor SHAP)')
                    
                    # Adicionar linha vertical em x=0
                    ax.axvline(x=0, color='gray', linestyle='-', alpha=0.3)
                    
                    # Adicionar valores como r√≥tulos nas barras
                    for i, v in enumerate(shap_df['SHAP value'].head(top_n)):
                        ax.text(
                            v + (0.01 if v >= 0 else -0.01), 
                            i, 
                            f"{v:.3f}", 
                            va='center', 
                            ha='left' if v >= 0 else 'right'
                        )
                    
                    # Exibir gr√°fico
                    st.pyplot(fig)
                    
                    # Calcular contribui√ß√£o total
                    positive_contribution = sum(v for v in shap_df['SHAP value'] if v > 0)
                    negative_contribution = sum(v for v in shap_df['SHAP value'] if v < 0)
                    net_contribution = positive_contribution + negative_contribution
                    
                    # Exibir an√°lise de contribui√ß√£o
                    st.write("### An√°lise de Contribui√ß√£o")
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Fatores Positivos", f"{positive_contribution:.3f}")
                    with col2:
                        st.metric("Fatores Negativos", f"{negative_contribution:.3f}")
                    with col3:
                        st.metric("Contribui√ß√£o L√≠quida", f"{net_contribution:.3f}")
                    
                    # Interpreta√ß√£o
                    st.write("""
                    ### Interpreta√ß√£o do Gr√°fico de Impacto
                    
                    Este gr√°fico mostra as principais vari√°veis que influenciaram a decis√£o do modelo para este cliente espec√≠fico:
                    
                    - **Barras verdes**: Caracter√≠sticas que aumentam a probabilidade de ser classificado como bom pagador
                    - **Barras vermelhas**: Caracter√≠sticas que reduzem a probabilidade de ser classificado como bom pagador
                    - **Comprimento das barras**: Magnitude da influ√™ncia de cada caracter√≠stica
                    
                    A diferen√ßa entre fatores positivos e negativos determina a classifica√ß√£o final do cliente.
                    """)
                    
                except Exception as e:
                    st.error(f"Erro ao processar valores SHAP para o exemplo: {e}")
                    
                    # Abordagem alternativa: mostrar import√¢ncia com coeficientes, se dispon√≠vel
                    st.info("Mostrando abordagem alternativa para explica√ß√£o...")
                    
                    if hasattr(st.session_state.model, 'feature_importances_'):
                        # Para modelos baseados em √°rvores
                        importances = st.session_state.model.feature_importances_
                        feature_impact = example_data.copy()
                        feature_impact['Import√¢ncia'] = [importances[feature_names.index(f)] 
                                                        if f in feature_names else 0 
                                                        for f in feature_impact['Caracter√≠stica']]
                        feature_impact['Impacto'] = feature_impact['Valor'] * feature_impact['Import√¢ncia']
                        feature_impact = feature_impact.sort_values('Impacto', key=abs, ascending=False)
                        
                        st.dataframe(feature_impact)
                        
                        fig, ax = plt.subplots(figsize=(10, 6))
                        top_n = min(10, len(feature_impact))
                        colors = ['#2EB086' if x > 0 else '#FF4B4B' for x in feature_impact['Impacto'].head(top_n)]
                        
                        ax.barh(
                            np.arange(top_n),
                            feature_impact['Impacto'].head(top_n),
                            color=colors
                        )
                        
                        ax.set_yticks(np.arange(top_n))
                        ax.set_yticklabels(feature_impact['Caracter√≠stica'].head(top_n))
                        ax.set_title('Top 10 Vari√°veis com Maior Impacto (An√°lise Aproximada)')
                        ax.set_xlabel('Impacto Aproximado')
                        
                        st.pyplot(fig)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar uma explica√ß√£o detalhada para este exemplo.")
                
            except Exception as e:
                st.error(f"Erro ao gerar explica√ß√£o local: {e}")
                st.info("Tente selecionar outro exemplo ou utilizar outro tipo de visualiza√ß√£o.")

        elif shap_plot_type == "Exemplo Individual":
            st.subheader("An√°lise Individual de Cliente")
            
            # Diagn√≥stico de SHAP para depura√ß√£o
            st.write("### Diagn√≥stico SHAP")
            if st.session_state.shap_output_dim == 'multiclass':
                st.write(f"Tipo SHAP: multiclass, shape: {len(st.session_state.shap_values)}")
                st.write(f"Shape da classe positiva: {st.session_state.shap_values[st.session_state.shap_positive_class_idx].shape}")
            else:
                try:
                    st.write(f"Tipo SHAP: single, shape: {st.session_state.shap_values.shape}")
                except:
                    st.write("Tipo SHAP: single, sem shape determinado")
            
            st.write(f"Shape dos dados: {st.session_state.X_sample.shape}")
            
            # Permitir selecionar um cliente aleat√≥rio ou criar um novo
            analysis_option = st.radio(
                "Selecione como analisar o cliente:",
                ["Selecionar cliente existente", "Criar cliente hipot√©tico"],
                horizontal=True
            )
            
            # Definir estat√≠sticas dos dados para uso posterior (corrigindo X_mean undefined)
            X_mean = st.session_state.X_sample.mean()
            X_std = st.session_state.X_sample.std()
            X_min = st.session_state.X_sample.min()
            X_max = st.session_state.X_sample.max()
            
            if analysis_option == "Selecionar cliente existente":
                # Selecionar cliente para an√°lise
                random_idx = st.slider("Selecione um ID de cliente:", 0, len(st.session_state.X_sample) - 1, 0)
                client_data = st.session_state.X_sample.iloc[random_idx:random_idx+1].copy()
                client_data_scaled = st.session_state.X_sample_scaled[random_idx:random_idx+1].copy()
                
                # Exibir dados do cliente
                st.subheader("Dados do Cliente")
                client_display = client_data.T.reset_index()
                client_display.columns = ['Caracter√≠stica', 'Valor']
                st.dataframe(client_display)
                
            else:  # Criar cliente hipot√©tico
                st.subheader("Criar Cliente Hipot√©tico")
                
                # Criar formul√°rio para input de dados do cliente
                col1, col2 = st.columns(2)
                
                # Dicion√°rio para armazenar os valores do cliente
                client_data_dict = {}
                
                with col1:
                    # Usar estat√≠sticas para definir valores padr√£o e limites dos sliders
                    client_data_dict['idade'] = st.slider(
                        "Idade:", 
                        int(max(18, X_min['idade'])), 
                        int(min(80, X_max['idade'])),
                        int(X_mean['idade'])
                    )
                    
                    client_data_dict['renda_anual'] = st.slider(
                        "Renda Anual (R$):", 
                        int(X_min['renda_anual']), 
                        int(X_max['renda_anual']),
                        int(X_mean['renda_anual']),
                        5000
                    )
                    
                    client_data_dict['tempo_emprego'] = st.slider(
                        "Tempo de Emprego (anos):", 
                        int(X_min['tempo_emprego']), 
                        int(X_max['tempo_emprego']),
                        int(X_mean['tempo_emprego'])
                    )
                    
                    client_data_dict['tempo_residencia'] = st.slider(
                        "Tempo de Resid√™ncia (anos):", 
                        int(X_min['tempo_residencia']), 
                        int(X_max['tempo_residencia']),
                        int(X_mean['tempo_residencia'])
                    )
                    
                    client_data_dict['qtd_contas'] = st.slider(
                        "Quantidade de Contas:", 
                        int(X_min['qtd_contas']), 
                        int(X_max['qtd_contas']),
                        int(X_mean['qtd_contas'])
                    )
                
                with col2:
                    client_data_dict['divida_total'] = st.slider(
                        "D√≠vida Total (R$):", 
                        int(X_min['divida_total']), 
                        int(X_max['divida_total']),
                        int(X_mean['divida_total']),
                        1000
                    )
                    
                    client_data_dict['taxa_utilizacao_credito'] = st.slider(
                        "Taxa de Utiliza√ß√£o de Cr√©dito:", 
                        float(X_min['taxa_utilizacao_credito']), 
                        float(X_max['taxa_utilizacao_credito']),
                        float(X_mean['taxa_utilizacao_credito']),
                        0.05
                    )
                    
                    client_data_dict['consultas_credito'] = st.slider(
                        "Consultas de Cr√©dito (√∫ltimos 6 meses):", 
                        int(X_min['consultas_credito']), 
                        int(X_max['consultas_credito']),
                        int(X_mean['consultas_credito'])
                    )
                    
                    client_data_dict['atrasos_pagamento'] = st.slider(
                        "Atrasos de Pagamento (√∫ltimos 12 meses):", 
                        int(X_min['atrasos_pagamento']), 
                        int(X_max['atrasos_pagamento']),
                        int(X_mean['atrasos_pagamento'])
                    )
                    
                    client_data_dict['historico_pagamento'] = st.slider(
                        "Hist√≥rico de Pagamento (pontos):", 
                        int(X_min['historico_pagamento']), 
                        int(X_max['historico_pagamento']),
                        int(X_mean['historico_pagamento'])
                    )
                
                # Criar DataFrame com dados do cliente
                client_data = pd.DataFrame([client_data_dict])
                
                # Normalizar dados usando o mesmo scaler do modelo
                try:
                    client_data_scaled = st.session_state.scaler.transform(client_data)
                except Exception as e:
                    st.error(f"Erro ao normalizar dados do cliente: {e}")
                    client_data_scaled = client_data.values  # Usar valores n√£o normalizados como fallback
            
            # Divider
            st.markdown("---")
            
            # Predizer score de cr√©dito
            try:
                credit_proba = st.session_state.model.predict_proba(client_data_scaled)[0, 1]
                credit_score = credit_proba * 1000  # Escala de 0 a 1000
            
                # Determinar categoria de risco
                risk_category = pd.cut(
                    [credit_score], 
                    bins=[0, 300, 500, 700, 850, 1000], 
                    labels=['Muito Alto Risco', 'Alto Risco', 'M√©dio Risco', 'Baixo Risco', 'Muito Baixo Risco']
                )[0]
                
                # Exibir score e categoria
                st.subheader("An√°lise de Cr√©dito")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    # Visualizar score como um gauge chart
                    fig = go.Figure(go.Indicator(
                        mode = "gauge+number",
                        value = credit_score,
                        domain = {'x': [0, 1], 'y': [0, 1]},
                        title = {'text': "Credit Score"},
                        gauge = {
                            'axis': {'range': [0, 1000], 'tickwidth': 1},
                            'bar': {'color': "darkblue"},
                            'steps': [
                                {'range': [0, 300], 'color': "#FF4B4B"},
                                {'range': [300, 500], 'color': "#FFA500"},
                                {'range': [500, 700], 'color': "#FFFF00"},
                                {'range': [700, 850], 'color': "#90EE90"},
                                {'range': [850, 1000], 'color': "#2EB086"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': 500
                            }
                        }
                    ))
                    
                    fig.update_layout(height=250)
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.metric("Categoria de Risco", f"{risk_category}")
                    
                    # Decis√£o de aprova√ß√£o
                    approval_decision = "Aprovado" if credit_score > 500 else "Reprovado"
                    approval_color = "#2EB086" if approval_decision == "Aprovado" else "#FF4B4B"
                    
                    st.markdown(f"### Decis√£o: <span style='color:{approval_color}'>{approval_decision}</span>", unsafe_allow_html=True)
                    
                    # Taxa de juros estimada
                    if approval_decision == "Aprovado":
                        if credit_score > 850:
                            juros = "8.9%"
                        elif credit_score > 700:
                            juros = "12.5%"
                        elif credit_score > 600:
                            juros = "18.0%"
                        else:
                            juros = "24.9%"
                            
                        st.metric("Taxa de Juros Estimada", juros)
                
                with col3:
                    # Probabilidade de inadimpl√™ncia
                    default_prob = 1 - credit_proba
                    
                    # Determinar n√≠vel de risco
                    if default_prob < 0.1:
                        risk_level = "Baixo"
                        risk_color = "#2EB086"
                    elif default_prob < 0.3:
                        risk_level = "Moderado"
                        risk_color = "#FFA500"
                    else:
                        risk_level = "Alto"
                        risk_color = "#FF4B4B"
                    
                    st.metric("Probabilidade de Inadimpl√™ncia", f"{default_prob:.1%}")
                    st.markdown(f"### Risco: <span style='color:{risk_color}'>{risk_level}</span>", unsafe_allow_html=True)
                
                # Divider
                st.markdown("---")
                
                # An√°lise SHAP
                st.subheader("Explica√ß√£o do Score de Cr√©dito")
                st.write("Este gr√°fico mostra como cada caracter√≠stica contribuiu para o score final deste cliente.")
                
                try:
                    # Abordagem simplificada para explica√ß√£o usando import√¢ncias do modelo
                    if hasattr(st.session_state.model, 'feature_importances_'):
                        # Para modelos baseados em √°rvores (como RandomForest, XGBoost)
                        importances = st.session_state.model.feature_importances_
                        
                        # Calcular dire√ß√£o do impacto baseado nos valores do cliente vs m√©dia
                        client_features = client_data.iloc[0].values
                        mean_features = X_mean.values
                        
                        # Criar valores SHAP aproximados
                        # Positivo se maior que m√©dia e feature √© positiva (ou menor que m√©dia e feature √© negativa)
                        # Negativo caso contr√°rio
                        impact_signs = []
                        for i, (client_val, mean_val) in enumerate(zip(client_features, mean_features)):
                            # Determinar import√¢ncia pela caracter√≠stica
                            feature_importance = importances[i]
                            
                            # Calcular diferen√ßa normalizada
                            diff = (client_val - mean_val) / (X_std.values[i] if X_std.values[i] > 0 else 1)
                            
                            # Determinar sinal baseado na import√¢ncia da caracter√≠stica e seu valor
                            # Esta √© uma aproxima√ß√£o simples que pode ser refinada
                            if feature_importance == 0:
                                impact_signs.append(0)
                            else:
                                # Diferen√ßa normalizada x import√¢ncia
                                # Mais intensa para valores mais distantes da m√©dia
                                impact_signs.append(diff * feature_importance * 5)  # Multiplicador para aumentar escala
                        
                        # Criar DataFrame para visualiza√ß√£o
                        client_shap_df = pd.DataFrame({
                            'Feature': client_data.columns,
                            'SHAP value': impact_signs,
                            'Feature value': client_features
                        }).sort_values('SHAP value', key=abs, ascending=False)
                        
                        # Criar gr√°fico de barras
                        fig, ax = plt.subplots(figsize=(12, 8))
                        
                        # Definir cores com base no sinal do valor SHAP
                        colors = ['#2EB086' if x > 0 else '#FF4B4B' for x in client_shap_df['SHAP value']]
                        
                        # Criar gr√°fico de barras
                        sns.barplot(
                            x='SHAP value',
                            y='Feature',
                            data=client_shap_df,
                            palette=colors,
                            ax=ax
                        )
                        
                        # Definir t√≠tulo e r√≥tulos
                        ax.set_title('Fatores que Impactam o Score do Cliente')
                        ax.set_xlabel('Impacto no Score (Valor aproximado)')
                        ax.set_ylabel('Caracter√≠stica')
                        
                        # Adicionar linha vertical em x=0
                        ax.axvline(x=0, color='gray', linestyle='-', alpha=0.3)
                        
                        # Adicionar os valores das caracter√≠sticas ao lado das barras
                        for i, (_, row) in enumerate(client_shap_df.iterrows()):
                            feature_name = row['Feature']
                            feature_val = row['Feature value']
                            
                            # Formata√ß√£o especial para certas caracter√≠sticas
                            if feature_name == 'taxa_utilizacao_credito':
                                display_val = f"{feature_val*100:.1f}%"
                            elif feature_name in ['renda_anual', 'divida_total']:
                                display_val = f"R$ {feature_val:,.2f}"
                            else:
                                display_val = f"{feature_val:.2f}"
                                
                            ax.text(
                                row['SHAP value'] + (0.05 if row['SHAP value'] >= 0 else -0.05), 
                                i, 
                                f"Valor: {display_val}", 
                                va='center', 
                                ha='left' if row['SHAP value'] >= 0 else 'right',
                                fontsize=9,
                                alpha=0.7
                            )
                        
                        # Exibir gr√°fico
                        st.pyplot(fig)
                        
                        # Recomenda√ß√µes
                        st.subheader("Recomenda√ß√µes para Melhorar o Score")
                        
                        # Identificar caracter√≠sticas negativas mais impactantes
                        negative_impacts = client_shap_df[client_shap_df['SHAP value'] < 0].head(3)
                        
                        if len(negative_impacts) > 0:
                            st.write("Para melhorar seu score de cr√©dito, considere trabalhar nestes aspectos:")
                            
                            for _, row in negative_impacts.iterrows():
                                feature = row['Feature']
                                value = row['Feature value']
                                
                                if feature == 'atrasos_pagamento':
                                    st.markdown(f"- **Reduzir Atrasos de Pagamento**: Atualmente com {value:.0f} atrasos. Pague suas contas em dia e evite novos atrasos.")
                                elif feature == 'consultas_credito':
                                    st.markdown(f"- **Reduzir Consultas de Cr√©dito**: Atualmente com {value:.0f} consultas. Evite solicitar muitos cr√©ditos em curto per√≠odo.")
                                elif feature == 'taxa_utilizacao_credito':
                                    st.markdown(f"- **Reduzir Taxa de Utiliza√ß√£o de Cr√©dito**: Atualmente em {value*100:.0f}%. Tente utilizar menos do seu limite dispon√≠vel.")
                                elif feature == 'divida_total':
                                    st.markdown(f"- **Reduzir D√≠vida Total**: Atualmente R$ {value:.2f}. Trabalhe para diminuir seu endividamento total.")
                                elif feature == 'qtd_contas':
                                    st.markdown(f"- **Reduzir N√∫mero de Contas**: Atualmente com {value:.0f} contas. Considere consolidar ou fechar algumas contas.")
                                elif feature == 'historico_pagamento':
                                    st.markdown(f"- **Melhorar Hist√≥rico de Pagamento**: Atual pontua√ß√£o {value:.0f}. Mantenha pagamentos em dia para aumentar esta pontua√ß√£o.")
                                else:
                                    st.markdown(f"- **Melhorar {feature}**: Valor atual {value:.2f}. Este fator est√° impactando negativamente seu score.")
                        else:
                            st.write("Seu perfil j√° apresenta boas caracter√≠sticas de cr√©dito!")
                    else:
                        st.warning("O tipo de modelo atual n√£o suporta import√¢ncia de caracter√≠sticas direta. N√£o foi poss√≠vel gerar a explica√ß√£o SHAP detalhada.")
                
                except Exception as e:
                    st.error(f"Erro ao calcular valores SHAP para este cliente: {e}")
                    
                    # Oferecer uma visualiza√ß√£o alternativa
                    st.info("Mostrando informa√ß√µes gerais do cliente sem an√°lise SHAP detalhada.")
                    
                    # Destacar fatores de risco baseados em conhecimento geral de cr√©dito
                    st.write("### Fatores de Risco Potenciais:")
                    risk_factors = []
                    
                    # Verificar fatores comuns de risco
                    if 'atrasos_pagamento' in client_data and client_data['atrasos_pagamento'].values[0] > 0:
                        risk_factors.append(f"- **Atrasos de Pagamento**: {client_data['atrasos_pagamento'].values[0]} atrasos")
                        
                    if 'taxa_utilizacao_credito' in client_data and client_data['taxa_utilizacao_credito'].values[0] > 0.7:
                        taxa = client_data['taxa_utilizacao_credito'].values[0] * 100
                        risk_factors.append(f"- **Alta Taxa de Utiliza√ß√£o de Cr√©dito**: {taxa:.0f}%")
                        
                    if 'consultas_credito' in client_data and client_data['consultas_credito'].values[0] > 3:
                        risk_factors.append(f"- **Muitas Consultas de Cr√©dito**: {client_data['consultas_credito'].values[0]} consultas")
                    
                    if 'historico_pagamento' in client_data and client_data['historico_pagamento'].values[0] < 60:
                        risk_factors.append(f"- **Baixo Hist√≥rico de Pagamento**: {client_data['historico_pagamento'].values[0]} pontos")
                    
                    if risk_factors:
                        for factor in risk_factors:
                            st.markdown(factor)
                    else:
                        st.write("N√£o foram identificados fatores de risco significativos.")
                    
                    # Criar uma an√°lise de impacto aproximada baseada em regras gerais de cr√©dito
                    st.subheader("An√°lise de Impacto Aproximada")
                    
                    impact_dict = {
                        'idade': 0.05,
                        'renda_anual': 0.15,
                        'tempo_emprego': 0.10,
                        'tempo_residencia': 0.05,
                        'qtd_contas': -0.05,
                        'divida_total': -0.10,
                        'taxa_utilizacao_credito': -0.20,
                        'consultas_credito': -0.10,
                        'atrasos_pagamento': -0.20,
                        'historico_pagamento': 0.15
                    }
                    
                    # Calcular impacto aproximado
                    impacts = []
                    for col in client_data.columns:
                        if col in impact_dict:
                            # Normalizar o valor em rela√ß√£o √† m√©dia
                            mean_val = X_mean[col]
                            std_val = max(0.0001, X_std[col])  # Evitar divis√£o por zero
                            
                            normalized_val = (client_data[col].values[0] - mean_val) / std_val
                            impact = normalized_val * impact_dict[col]
                            
                            impacts.append({
                                'Feature': col,
                                'Impact': impact,
                                'Value': client_data[col].values[0]
                            })
                    
                    # Criar DataFrame e ordenar
                    impact_df = pd.DataFrame(impacts).sort_values('Impact', key=abs, ascending=False)
                    
                    # Criar gr√°fico de barras
                    fig, ax = plt.subplots(figsize=(10, 6))
                    colors = ['#2EB086' if x > 0 else '#FF4B4B' for x in impact_df['Impact']]
                    
                    sns.barplot(
                        x='Impact', 
                        y='Feature',
                        data=impact_df,
                        palette=colors,
                        ax=ax
                    )
                    
                    ax.set_title('Impacto Aproximado no Score (Baseado em Regras Gerais)')
                    ax.set_xlabel('Impacto Estimado')
                    ax.axvline(x=0, color='gray', linestyle='-', alpha=0.3)
                    
                    st.pyplot(fig)
            
            except Exception as e:
                st.error(f"Erro ao calcular score de cr√©dito: {e}")
                st.warning("N√£o foi poss√≠vel calcular o score de cr√©dito para este cliente.")

# Simulador de Cr√©dito
elif app_mode == "Simulador de Cr√©dito":
    st.header("Simulador de Decis√µes de Cr√©dito")
    
    st.write("""
    Este simulador permite testar diferentes cen√°rios de aprova√ß√£o de cr√©dito, 
    definindo pol√≠ticas de risco e analisando o impacto nas taxas de aprova√ß√£o e inadimpl√™ncia.
    """)
    
    # Defini√ß√£o das pol√≠ticas de risco
    st.subheader("Defini√ß√£o de Pol√≠tica de Risco")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Score m√≠nimo para aprova√ß√£o
        min_score = st.slider(
            "Score M√≠nimo para Aprova√ß√£o (0-1000):", 
            min_value=0, 
            max_value=1000, 
            value=500, 
            step=10,
            help="Clientes com score abaixo deste valor ser√£o rejeitados"
        )
        
        # Taxa de juros base
        base_interest_rate = st.slider(
            "Taxa de Juros Base (% a.a.):", 
            min_value=5.0, 
            max_value=50.0, 
            value=15.0, 
            step=0.5,
            help="Taxa de juros base anual para clientes de baixo risco"
        )
        
        # Valor m√°ximo do empr√©stimo (% da renda)
        max_loan_income_ratio = st.slider(
            "Valor M√°ximo do Empr√©stimo (m√∫ltiplo da renda):", 
            min_value=0.5, 
            max_value=10.0, 
            value=5.0, 
            step=0.5,
            help="Limite m√°ximo do empr√©stimo como m√∫ltiplo da renda anual"
        )
    
    with col2:
        # Fatores de ajuste de taxa
        st.write("**Ajustes de Taxa de Juros por Categoria de Risco:**")
        
        risk_adjustments = {}
        risk_adjustments['Muito Alto Risco'] = st.slider("Adicional para Muito Alto Risco (%):", 0.0, 30.0, 25.0, 0.5)
        risk_adjustments['Alto Risco'] = st.slider("Adicional para Alto Risco (%):", 0.0, 20.0, 15.0, 0.5)
        risk_adjustments['M√©dio Risco'] = st.slider("Adicional para M√©dio Risco (%):", 0.0, 10.0, 5.0, 0.5)
        risk_adjustments['Baixo Risco'] = st.slider("Adicional para Baixo Risco (%):", 0.0, 5.0, 0.0, 0.5)
        risk_adjustments['Muito Baixo Risco'] = st.slider("Desconto para Muito Baixo Risco (%):", 0.0, 5.0, 2.0, 0.5)
    
    # Regras adicionais
    st.subheader("Regras Adicionais")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        max_debt_income_ratio = st.slider(
            "D√≠vida M√°xima (% da renda):", 
            min_value=10, 
            max_value=100, 
            value=50, 
            step=5,
            help="D√≠vida total m√°xima como percentual da renda"
        )
    
    with col2:
        min_employment_time = st.slider(
            "Tempo M√≠nimo de Emprego (anos):", 
            min_value=0, 
            max_value=5, 
            value=1, 
            step=1,
            help="Tempo m√≠nimo de emprego para aprova√ß√£o"
        )
    
    with col3:
        max_late_payments = st.slider(
            "M√°ximo de Atrasos Permitidos:", 
            min_value=0, 
            max_value=12, 
            value=2, 
            step=1,
            help="N√∫mero m√°ximo de atrasos de pagamento permitidos"
        )
    
    # Bot√£o para simular
    simulate_button = st.button("Simular Pol√≠tica de Cr√©dito", type="primary")
    
    if simulate_button:
        with st.spinner("Simulando pol√≠tica de cr√©dito..."):
            # Calcular scores para todos os clientes
            X_all = st.session_state.data.drop('bom_pagador', axis=1)
            X_all_scaled = st.session_state.scaler.transform(X_all)
            all_scores = st.session_state.model.predict_proba(X_all_scaled)[:, 1] * 1000
            
            # Criar DataFrame com resultados
            simulation_results = pd.DataFrame({
                'score': all_scores,
                'bom_pagador': st.session_state.data['bom_pagador'],
                'idade': st.session_state.data['idade'],
                'renda_anual': st.session_state.data['renda_anual'],
                'tempo_emprego': st.session_state.data['tempo_emprego'],
                'divida_total': st.session_state.data['divida_total'],
                'atrasos_pagamento': st.session_state.data['atrasos_pagamento']
            })
            
            # Categorizar scores
            simulation_results['categoria_risco'] = pd.cut(
                simulation_results['score'], 
                bins=[0, 300, 500, 700, 850, 1000], 
                labels=['Muito Alto Risco', 'Alto Risco', 'M√©dio Risco', 'Baixo Risco', 'Muito Baixo Risco']
            )
            
            # Aplicar crit√©rios de aprova√ß√£o
            simulation_results['divida_renda_ratio'] = simulation_results['divida_total'] / simulation_results['renda_anual'] * 100
            
            # Verificar aprova√ß√£o pelo score
            simulation_results['aprovado_score'] = simulation_results['score'] >= min_score
            
            # Verificar aprova√ß√£o por tempo de emprego
            simulation_results['aprovado_emprego'] = simulation_results['tempo_emprego'] >= min_employment_time
            
            # Verificar aprova√ß√£o por atrasos
            simulation_results['aprovado_atrasos'] = simulation_results['atrasos_pagamento'] <= max_late_payments
            
            # Verificar aprova√ß√£o por raz√£o d√≠vida/renda
            simulation_results['aprovado_divida'] = simulation_results['divida_renda_ratio'] <= max_debt_income_ratio
            
            # Decis√£o final de aprova√ß√£o (todas as regras devem ser satisfeitas)
            simulation_results['aprovado'] = (
                simulation_results['aprovado_score'] & 
                simulation_results['aprovado_emprego'] & 
                simulation_results['aprovado_atrasos'] & 
                simulation_results['aprovado_divida']
            )
            
            # Calcular valor m√°ximo do empr√©stimo
            simulation_results['valor_max_emprestimo'] = simulation_results['renda_anual'] * max_loan_income_ratio
            
            # Calcular taxa de juros personalizada
            simulation_results['taxa_juros'] = base_interest_rate
            
            # Ajustar taxa por categoria de risco
            for categoria, ajuste in risk_adjustments.items():
                # Para Muito Baixo Risco, aplicamos desconto
                if categoria == 'Muito Baixo Risco':
                    simulation_results.loc[simulation_results['categoria_risco'] == categoria, 'taxa_juros'] -= ajuste
                else:
                    simulation_results.loc[simulation_results['categoria_risco'] == categoria, 'taxa_juros'] += ajuste
            
            # Limitar taxa m√≠nima a 1%
            simulation_results['taxa_juros'] = simulation_results['taxa_juros'].clip(lower=1.0)
            
            # Resultados da simula√ß√£o
            st.subheader("Resultados da Simula√ß√£o")
            
            # M√©tricas principais
            total_clients = len(simulation_results)
            approved_clients = simulation_results['aprovado'].sum()
            approval_rate = approved_clients / total_clients
            
            # Calcular taxa de inadimpl√™ncia esperada na carteira aprovada
            if approved_clients > 0:
                expected_default_rate = 1 - simulation_results[simulation_results['aprovado']]['bom_pagador'].mean()
            else:
                expected_default_rate = 0
            
            # Calcular valor total dos empr√©stimos aprovados
            total_loan_value = simulation_results[simulation_results['aprovado']]['valor_max_emprestimo'].sum()
            
            # Exibir m√©tricas em cards
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Taxa de Aprova√ß√£o", f"{approval_rate:.2%}")
                st.metric("Clientes Aprovados", f"{approved_clients} de {total_clients}")
            
            with col2:
                st.metric("Taxa de Inadimpl√™ncia Estimada", f"{expected_default_rate:.2%}")
                st.metric("Valor Total da Carteira", f"R$ {total_loan_value:,.2f}")
            
            with col3:
                st.metric("Taxa de Juros M√©dia", f"{simulation_results[simulation_results['aprovado']]['taxa_juros'].mean():.2f}% a.a.")
                st.metric("Score M√©dio dos Aprovados", f"{simulation_results[simulation_results['aprovado']]['score'].mean():.0f}")
            
            # Gr√°fico de aprova√ß√£o por categoria de risco
            st.subheader("Aprova√ß√£o por Categoria de Risco")
            
            approval_by_category = simulation_results.groupby('categoria_risco')['aprovado'].mean().reset_index()
            approval_by_category.columns = ['Categoria de Risco', 'Taxa de Aprova√ß√£o']
            approval_by_category['Taxa de Aprova√ß√£o'] = approval_by_category['Taxa de Aprova√ß√£o'] * 100
            
            fig = px.bar(
                approval_by_category,
                x='Categoria de Risco',
                y='Taxa de Aprova√ß√£o',
                color='Taxa de Aprova√ß√£o',
                labels={'Taxa de Aprova√ß√£o': 'Taxa de Aprova√ß√£o (%)'},
                title='Taxa de Aprova√ß√£o por Categoria de Risco',
                color_continuous_scale='Blues'
            )
            fig.update_layout(xaxis={'categoryorder': 'array', 'categoryarray': ['Muito Alto Risco', 'Alto Risco', 'M√©dio Risco', 'Baixo Risco', 'Muito Baixo Risco']})
            st.plotly_chart(fig, use_container_width=True)
            
            # Distribui√ß√£o das taxas de juros
            st.subheader("Distribui√ß√£o das Taxas de Juros (Aprovados)")
            
            if approved_clients > 0:
                fig = px.histogram(
                    simulation_results[simulation_results['aprovado']], 
                    x='taxa_juros',
                    nbins=20,
                    labels={'taxa_juros': 'Taxa de Juros (% a.a.)'},
                    title='Distribui√ß√£o das Taxas de Juros para Clientes Aprovados',
                    color_discrete_sequence=['#3366CC']
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("Nenhum cliente aprovado com os crit√©rios atuais.")
            
            # Motivos de rejei√ß√£o
            st.subheader("Motivos de Rejei√ß√£o")
            
            rejected_reasons = {
                'Score Baixo': (~simulation_results['aprovado_score']).sum(),
                'Tempo de Emprego Insuficiente': (~simulation_results['aprovado_emprego']).sum(),
                'Muitos Atrasos': (~simulation_results['aprovado_atrasos']).sum(),
                'D√≠vida/Renda Alta': (~simulation_results['aprovado_divida']).sum()
            }
            
            reasons_df = pd.DataFrame({
                'Motivo': list(rejected_reasons.keys()),
                'Quantidade': list(rejected_reasons.values())
            })
            
            fig = px.bar(
                reasons_df,
                x='Motivo',
                y='Quantidade',
                color='Quantidade',
                title='Motivos de Rejei√ß√£o',
                color_continuous_scale='Reds'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Valor esperado da carteira
            st.subheader("An√°lise Financeira da Carteira")
            
            # Estimativa simplificada de lucro
            if approved_clients > 0:
                # Assumindo empr√©stimo m√©dio de 12 meses
                avg_loan_approved = simulation_results[simulation_results['aprovado']]['valor_max_emprestimo'].mean()
                avg_interest_rate = simulation_results[simulation_results['aprovado']]['taxa_juros'].mean() / 100
                
                # Receita esperada de juros (simplificada)
                expected_interest_revenue = total_loan_value * avg_interest_rate
                
                # Perda esperada devido √† inadimpl√™ncia (simplificada)
                expected_loss = total_loan_value * expected_default_rate
                
                # Lucro esperado
                expected_profit = expected_interest_revenue - expected_loss
                
                # ROI estimado
                roi = expected_profit / total_loan_value * 100 if total_loan_value > 0 else 0
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.metric("Receita Esperada de Juros", f"R$ {expected_interest_revenue:,.2f}")
                    st.metric("Perda Esperada (Inadimpl√™ncia)", f"R$ {expected_loss:,.2f}")
                
                with col2:
                    st.metric("Lucro Esperado", f"R$ {expected_profit:,.2f}")
                    st.metric("ROI Estimado", f"{roi:.2f}%")
                
                # Tabela com an√°lise detalhada por categoria de risco
                st.subheader("An√°lise por Categoria de Risco")
                
                # Agrupar por categoria
                category_analysis = simulation_results[simulation_results['aprovado']].groupby('categoria_risco').agg({
                    'bom_pagador': 'mean',
                    'valor_max_emprestimo': 'sum',
                    'taxa_juros': 'mean',
                    'aprovado': 'count'
                }).reset_index()
                
                # Renomear colunas
                category_analysis.columns = [
                    'Categoria de Risco', 
                    'Taxa de Bons Pagadores', 
                    'Valor Total', 
                    'Taxa de Juros M√©dia',
                    'Quantidade de Clientes'
                ]
                
                # Calcular inadimpl√™ncia
                category_analysis['Taxa de Inadimpl√™ncia'] = 1 - category_analysis['Taxa de Bons Pagadores']
                
                # Calcular receita e perda
                category_analysis['Receita de Juros'] = category_analysis['Valor Total'] * (category_analysis['Taxa de Juros M√©dia'] / 100)
                category_analysis['Perda por Inadimpl√™ncia'] = category_analysis['Valor Total'] * category_analysis['Taxa de Inadimpl√™ncia']
                category_analysis['Lucro Estimado'] = category_analysis['Receita de Juros'] - category_analysis['Perda por Inadimpl√™ncia']
                
                # Formatar valores
                category_analysis['Taxa de Bons Pagadores'] = category_analysis['Taxa de Bons Pagadores'].apply(lambda x: f"{x:.2%}")
                category_analysis['Taxa de Inadimpl√™ncia'] = category_analysis['Taxa de Inadimpl√™ncia'].apply(lambda x: f"{x:.2%}")
                category_analysis['Taxa de Juros M√©dia'] = category_analysis['Taxa de Juros M√©dia'].apply(lambda x: f"{x:.2f}%")
                category_analysis['Valor Total'] = category_analysis['Valor Total'].apply(lambda x: f"R$ {x:,.2f}")
                category_analysis['Receita de Juros'] = category_analysis['Receita de Juros'].apply(lambda x: f"R$ {x:,.2f}")
                category_analysis['Perda por Inadimpl√™ncia'] = category_analysis['Perda por Inadimpl√™ncia'].apply(lambda x: f"R$ {x:,.2f}")
                category_analysis['Lucro Estimado'] = category_analysis['Lucro Estimado'].apply(lambda x: f"R$ {x:,.2f}")
                
                st.dataframe(category_analysis)
            else:
                st.warning("Nenhum cliente aprovado para an√°lise financeira.")
    
    # Dicas de otimiza√ß√£o
    with st.expander("Dicas para Otimiza√ß√£o de Pol√≠ticas"):
        st.markdown("""
        ### Como otimizar sua pol√≠tica de cr√©dito
        
        1. **Balanceamento de risco e retorno**:
           - Pol√≠ticas muito restritivas (score m√≠nimo alto) reduzem a inadimpl√™ncia, mas tamb√©m limitam o crescimento.
           - Pol√≠ticas muito permissivas aumentam o volume de empr√©stimos, mas com maior risco.
        
        2. **Segmenta√ß√£o de clientes**:
           - Crie pol√≠ticas diferentes para segmentos distintos (por idade, renda, etc.).
           - Clientes de baixo risco podem receber limites maiores e taxas menores.
        
        3. **Ajuste din√¢mico**:
           - Monitore o desempenho da carteira e ajuste os par√¢metros periodicamente.
           - Considere fatores macroecon√¥micos na defini√ß√£o de pol√≠ticas.
        
        4. **Precifica√ß√£o baseada em risco**:
           - A taxa de juros deve compensar o risco estimado.
           - Calcule o ponto de equil√≠brio entre atratividade da taxa e compensa√ß√£o do risco.
        """)

# Compara√ß√£o de Modelos
elif app_mode == "Compara√ß√£o de Modelos":
    st.header("Compara√ß√£o de Modelos de Machine Learning")
    
    st.write("""
    Esta se√ß√£o permite comparar diferentes algoritmos de machine learning para credit scoring.
    Compare m√©tricas de performance, curvas ROC, e distribui√ß√µes de scores para escolher o modelo ideal.
    """)
    
    # Op√ß√µes de configura√ß√£o
    st.subheader("Configura√ß√£o da An√°lise")
    col1, col2 = st.columns(2)
    
    with col1:
        validation_method = st.radio(
            "M√©todo de Valida√ß√£o:",
            ["Holdout (Train/Test Split)", "Valida√ß√£o Cruzada (5-fold)"],
            horizontal=True
        )
    
    with col2:
        selected_models = st.multiselect(
            "Selecione os Modelos para Compara√ß√£o:",
            ["Random Forest", "XGBoost", "LightGBM", "Rede Neural (MLP)", "Regress√£o Log√≠stica"],
            default=["Random Forest", "XGBoost", "Regress√£o Log√≠stica"]
        )
    
    if not selected_models:
        st.warning("Por favor, selecione pelo menos um modelo para an√°lise.")
    else:
        # Mapear sele√ß√µes para inst√¢ncias de modelos
        model_mapping = {
            "Random Forest": RandomForestClassifier(n_estimators=100, random_state=42),
            "XGBoost": XGBClassifier(objective='binary:logistic', random_state=42),
            "LightGBM": LGBMClassifier(random_state=42),
            "Rede Neural (MLP)": MLPClassifier(max_iter=300, random_state=42),
            "Regress√£o Log√≠stica": LogisticRegression(random_state=42)
        }
        
        models = [model_mapping[name] for name in selected_models]
        
        # Bot√£o para iniciar a compara√ß√£o
        if st.button("Comparar Modelos Selecionados", type="primary"):
            # Divis√£o entre features e target
            X = st.session_state.data.drop('bom_pagador', axis=1)
            y = st.session_state.data['bom_pagador']
            
            # Normaliza√ß√£o dos dados
            scaler = StandardScaler()
            X_scaled = scaler.fit_transform(X)
            
            # Lista para armazenar resultados
            results = []
            roc_curves = []
            pr_curves = []
            score_distributions = []
            
            # Divis√£o entre treino e teste (para m√©todo holdout)
            X_train, X_test, y_train, y_test = train_test_split(
                X_scaled, y, test_size=0.2, random_state=42
            )
            
            # Preparar figura para curvas ROC
            fig_roc = go.Figure()
            fig_roc.update_layout(
                title='Curvas ROC',
                xaxis_title='Taxa de Falsos Positivos',
                yaxis_title='Taxa de Verdadeiros Positivos',
                legend=dict(x=0.1, y=0, orientation='h')
            )
            
            # Preparar figura para curvas Precision-Recall
            fig_pr = go.Figure()
            fig_pr.update_layout(
                title='Curvas Precision-Recall',
                xaxis_title='Recall',
                yaxis_title='Precision',
                legend=dict(x=0.1, y=0, orientation='h')
            )
            
            # Analisar cada modelo
            for model in models:
                model_name = model.__class__.__name__
                with st.spinner(f"Analisando {model_name}..."):
                    
                    if validation_method == "Holdout (Train/Test Split)":
                        # Treinar no conjunto de treino
                        model.fit(X_train, y_train)
                        
                        # Prever no conjunto de teste
                        y_pred = model.predict(X_test)
                        y_prob = model.predict_proba(X_test)[:, 1]
                        
                        # Calcular m√©tricas
                        report = classification_report(y_test, y_pred, output_dict=True)
                        
                        # Calcular curva ROC
                        fpr, tpr, _ = roc_curve(y_test, y_prob)
                        roc_auc = auc(fpr, tpr)
                        
                        # Adicionar √† figura ROC
                        fig_roc.add_trace(go.Scatter(
                            x=fpr, y=tpr, 
                            name=f"{model_name} (AUC={roc_auc:.3f})",
                            mode='lines'
                        ))
                        
                        # Calcular curva Precision-Recall
                        precision, recall, _ = precision_recall_curve(y_test, y_prob)
                        
                        # Adicionar √† figura Precision-Recall
                        fig_pr.add_trace(go.Scatter(
                            x=recall, y=precision,
                            name=f"{model_name}",
                            mode='lines'
                        ))
                        
                        # Calcular scores
                        scores = y_prob * 1000
                    
                    else:  # Valida√ß√£o Cruzada
                        # Calcular m√©tricas via valida√ß√£o cruzada
                        cv_accuracy = cross_val_score(model, X_scaled, y, cv=5, scoring='accuracy')
                        cv_precision = cross_val_score(model, X_scaled, y, cv=5, scoring='precision')
                        cv_recall = cross_val_score(model, X_scaled, y, cv=5, scoring='recall')
                        cv_f1 = cross_val_score(model, X_scaled, y, cv=5, scoring='f1')
                        
                        # Treinar no conjunto completo para ROC e distribui√ß√µes
                        model.fit(X_scaled, y)
                        y_prob = model.predict_proba(X_scaled)[:, 1]
                        
                        # Calcular ROC via valida√ß√£o cruzada (aproxima√ß√£o)
                        fpr, tpr, _ = roc_curve(y, y_prob)
                        roc_auc = auc(fpr, tpr)
                        
                        # Adicionar √† figura ROC
                        fig_roc.add_trace(go.Scatter(
                            x=fpr, y=tpr, 
                            name=f"{model_name} (AUC={roc_auc:.3f})",
                            mode='lines'
                        ))
                        
                        # Calcular curva Precision-Recall
                        precision, recall, _ = precision_recall_curve(y, y_prob)
                        
                        # Adicionar √† figura Precision-Recall
                        fig_pr.add_trace(go.Scatter(
                            x=recall, y=precision,
                            name=f"{model_name}",
                            mode='lines'
                        ))
                        
                        # Calcular scores
                        scores = y_prob * 1000
                        
                        # Criar relat√≥rio similar ao do m√©todo holdout
                        report = {
                            'accuracy': np.mean(cv_accuracy),
                            '1': {
                                'precision': np.mean(cv_precision),
                                'recall': np.mean(cv_recall),
                                'f1-score': np.mean(cv_f1)
                            }
                        }
                    
                    # Armazenar resultados
                    results.append({
                        'Modelo': model_name,
                        'Acur√°cia': report['accuracy'],
                        'Precis√£o': report['1']['precision'],
                        'Recall': report['1']['recall'],
                        'F1-Score': report['1']['f1-score'],
                        'AUC-ROC': roc_auc
                    })
                    
                    # Armazenar distribui√ß√£o de scores
                    score_distributions.append({
                        'modelo': model_name,
                        'scores': scores
                    })
            
            # Adicionar linha de refer√™ncia √† curva ROC
            fig_roc.add_trace(go.Scatter(
                x=[0, 1], y=[0, 1],
                name='Chance',
                mode='lines',
                line=dict(dash='dash', color='gray')
            ))
            
            # Criar DataFrame com resultados
            results_df = pd.DataFrame(results)
            
            # Exibir tabela de resultados
            st.subheader("Compara√ß√£o de M√©tricas")
            
            # Formatar para exibi√ß√£o em porcentagem
            display_df = results_df.copy()
            for col in ['Acur√°cia', 'Precis√£o', 'Recall', 'F1-Score', 'AUC-ROC']:
                display_df[col] = display_df[col].map(lambda x: f"{x:.2%}")
                
            st.dataframe(display_df)
            
            # Exibir gr√°fico de barras comparativo
            st.subheader("Compara√ß√£o Visual de M√©tricas")
            
            metrics_df = pd.melt(
                results_df, 
                id_vars=['Modelo'], 
                value_vars=['Acur√°cia', 'Precis√£o', 'Recall', 'F1-Score', 'AUC-ROC'],
                var_name='M√©trica', 
                value_name='Valor'
            )
            
            fig_bar = px.bar(
                metrics_df, 
                x='M√©trica', 
                y='Valor',
                color='Modelo',
                barmode='group',
                text_auto='.0%'
            )
            
            fig_bar.update_layout(yaxis_tickformat='.0%')
            st.plotly_chart(fig_bar, use_container_width=True)
            
            # Exibir curvas ROC
            st.subheader("Curvas ROC")
            st.plotly_chart(fig_roc, use_container_width=True)
            
            # Exibir curvas Precision-Recall
            st.subheader("Curvas Precision-Recall")
            st.plotly_chart(fig_pr, use_container_width=True)
            
            # Exibir distribui√ß√µes de scores
            st.subheader("Compara√ß√£o das Distribui√ß√µes de Scores")
            
            # Criar DataFrame para histograma
            scores_data = []
            for dist in score_distributions:
                for score in dist['scores']:
                    scores_data.append({
                        'Modelo': dist['modelo'],
                        'Score': score
                    })
            
            scores_df = pd.DataFrame(scores_data)
            
            fig_hist = px.histogram(
                scores_df,
                x='Score',
                color='Modelo',
                barmode='overlay',
                opacity=0.7,
                nbins=50,
                range_x=[0, 1000]
            )
            
            fig_hist.update_layout(
                title='Distribui√ß√£o dos Scores por Modelo',
                xaxis_title='Credit Score',
                yaxis_title='Frequ√™ncia'
            )
            
            st.plotly_chart(fig_hist, use_container_width=True)
            
            # Insights e recomenda√ß√µes
            st.subheader("Insights e Recomenda√ß√µes")
            
            # Encontrar melhor modelo para cada m√©trica
            best_accuracy = results_df.loc[results_df['Acur√°cia'].idxmax()]
            best_precision = results_df.loc[results_df['Precis√£o'].idxmax()]
            best_recall = results_df.loc[results_df['Recall'].idxmax()]
            best_f1 = results_df.loc[results_df['F1-Score'].idxmax()]
            best_auc = results_df.loc[results_df['AUC-ROC'].idxmax()]
            
            st.write(f"""
            ### An√°lise dos Resultados
            
            - **Melhor Acur√°cia**: {best_accuracy['Modelo']} ({best_accuracy['Acur√°cia']:.2%})
            - **Melhor Precis√£o**: {best_precision['Modelo']} ({best_precision['Precis√£o']:.2%})
            - **Melhor Recall**: {best_recall['Modelo']} ({best_recall['Recall']:.2%})
            - **Melhor F1-Score**: {best_f1['Modelo']} ({best_f1['F1-Score']:.2%})
            - **Melhor AUC-ROC**: {best_auc['Modelo']} ({best_auc['AUC-ROC']:.2%})
            
            #### Qual modelo escolher?
            
            - Para **minimizar falsos positivos** (evitar aprovar clientes ruins), priorize a **Precis√£o** ({best_precision['Modelo']}).
            - Para **minimizar falsos negativos** (evitar rejeitar bons clientes), priorize o **Recall** ({best_recall['Modelo']}).
            - Para um **equil√≠brio geral**, considere o **F1-Score** ou **AUC-ROC** ({best_f1['Modelo']} ou {best_auc['Modelo']}).
            
            #### Pr√≥ximos passos recomendados:
            
            1. Otimize hiperpar√¢metros do modelo escolhido
            2. Considere ensemble de modelos para melhorar resultados
            3. Implemente valida√ß√£o espec√≠fica no contexto de neg√≥cio
            """)
            
            # Op√ß√£o para salvar o melhor modelo
            st.subheader("Salvar Modelo")
            save_model_option = st.radio(
                "Escolha o modelo para usar no sistema:",
                [m['Modelo'] for m in results],
                horizontal=True
            )
            
            if st.button("Usar este modelo como padr√£o"):
                # Identificar o modelo escolhido
                selected_idx = next(i for i, m in enumerate(results) if m['Modelo'] == save_model_option)
                selected_model = models[selected_idx]
                
                # Treinar no conjunto completo
                X = st.session_state.data.drop('bom_pagador', axis=1)
                y = st.session_state.data['bom_pagador']
                
                scaler = StandardScaler()
                X_scaled = scaler.fit_transform(X)
                
                selected_model.fit(X_scaled, y)
                
                # Salvar no session state
                st.session_state.model = selected_model
                st.session_state.scaler = scaler
                
                st.success(f"Modelo {save_model_option} definido como padr√£o do sistema!")

# An√°lise de Cobran√ßa
elif app_mode == "An√°lise de Cobran√ßa":
    st.header("An√°lise e Estrat√©gia de Cobran√ßa")
    
    st.write("""
    Esta se√ß√£o permite analisar diferentes estrat√©gias de cobran√ßa e prever
    a probabilidade de recupera√ß√£o de cr√©dito com base em caracter√≠sticas do cliente
    e abordagens de negocia√ß√£o.
    """)
    
    # Verificar se j√° existem dados de cobran√ßa ou gerar novos
    if 'collection_data' not in st.session_state:
        with st.spinner("Gerando dados sint√©ticos de cobran√ßa..."):
            st.session_state.collection_data = generate_collection_data(st.session_state.data)
    
    # Tabs para organizar a interface
    tab1, tab2, tab3 = st.tabs(["Vis√£o Geral", "An√°lise de Estrat√©gias", "Simulador de Recupera√ß√£o"])

    with tab1:
        st.subheader("Vis√£o Geral da Carteira em Cobran√ßa")
        
        # Estat√≠sticas gerais
        col1, col2, col3 = st.columns(3)
        
        with col1:
            total_valor = st.session_state.collection_data['valor_atraso'].sum()
            st.metric("Valor Total em Atraso", f"R$ {total_valor:,.2f}")
            
            qtd_devedores = len(st.session_state.collection_data)
            st.metric("Quantidade de Devedores", f"{qtd_devedores}")
        
        with col2:
            valor_medio = st.session_state.collection_data['valor_atraso'].mean()
            st.metric("Valor M√©dio em Atraso", f"R$ {valor_medio:,.2f}")
            
            dias_medio = st.session_state.collection_data['dias_atraso'].mean()
            st.metric("Dias de Atraso (M√©dia)", f"{dias_medio:.0f} dias")
        
        with col3:
            taxa_recuperacao = st.session_state.collection_data['sucesso_cobranca'].mean()
            st.metric("Taxa de Recupera√ß√£o", f"{taxa_recuperacao:.2%}")
            
            valor_recuperado = st.session_state.collection_data.loc[
                st.session_state.collection_data['sucesso_cobranca'], 'valor_atraso'
            ].sum()
            st.metric("Valor Recuperado", f"R$ {valor_recuperado:,.2f}")
        
        # Gr√°ficos de distribui√ß√£o de resultados
        st.subheader("Distribui√ß√£o dos Resultados de Cobran√ßa")
        
        # Gr√°fico de pizza para resultados
        results_count = st.session_state.collection_data['resultado_texto'].value_counts()
        
        fig = px.pie(
            values=results_count.values, 
            names=results_count.index,
            title="Resultados de Cobran√ßa",
            color_discrete_sequence=px.colors.qualitative.Set2
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Gr√°fico de barras para estrat√©gias x resultados
        strategy_results = pd.crosstab(
            st.session_state.collection_data['estrategia_cobranca'],
            st.session_state.collection_data['resultado_texto'],
            normalize='index'
        ) * 100  # para percentual
        
        fig = px.bar(
            strategy_results, 
            barmode='group',
            title="Efetividade das Estrat√©gias de Cobran√ßa",
            labels={'value': 'Percentual (%)', 'estrategia_cobranca': 'Estrat√©gia'},
            color_discrete_sequence=px.colors.qualitative.Set1
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Mapa de calor para correla√ß√µes
        st.subheader("Correla√ß√µes entre Vari√°veis de Cobran√ßa")
        
        # Selecionar colunas relevantes para correla√ß√£o
        corr_cols = [
            'dias_atraso', 'valor_atraso', 'contatos_realizados', 
            'resposta_contato', 'proposta_negociacao', 'resultado',
            'idade', 'renda_anual', 'tempo_emprego', 'divida_total'
        ]
        
        corr_matrix = st.session_state.collection_data[corr_cols].corr()
        
        fig, ax = plt.subplots(figsize=(10, 8))
        mask = np.triu(np.ones_like(corr_matrix, dtype=bool))
        cmap = sns.diverging_palette(230, 20, as_cmap=True)
        
        sns.heatmap(
            corr_matrix, 
            mask=mask, 
            cmap=cmap, 
            vmax=1, 
            vmin=-1, 
            center=0,
            square=True, 
            linewidths=.5, 
            cbar_kws={"shrink": .5},
            annot=True,
            fmt=".2f"
        )
        plt.title('Matriz de Correla√ß√£o', fontsize=16)
        st.pyplot(fig)

    with tab2:
        st.subheader("An√°lise de Estrat√©gias de Cobran√ßa")
        
        # Filtros para an√°lise
        st.write("**Filtros para an√°lise**")
        col1, col2 = st.columns(2)
        
        with col1:
            filter_estrategia = st.multiselect(
                "Estrat√©gia de Cobran√ßa:",
                options=st.session_state.collection_data['estrategia_cobranca'].unique(),
                default=st.session_state.collection_data['estrategia_cobranca'].unique()
            )
        
        with col2:
            filter_valor = st.slider(
                "Faixa de Valor em Atraso (R$):",
                float(st.session_state.collection_data['valor_atraso'].min()),
                float(st.session_state.collection_data['valor_atraso'].max()),
                (float(st.session_state.collection_data['valor_atraso'].min()), 
                 float(st.session_state.collection_data['valor_atraso'].max()))
            )
        
        # Filtrar dados
        filtered_data = st.session_state.collection_data[
            (st.session_state.collection_data['estrategia_cobranca'].isin(filter_estrategia)) &
            (st.session_state.collection_data['valor_atraso'] >= filter_valor[0]) &
            (st.session_state.collection_data['valor_atraso'] <= filter_valor[1])
        ]
        
        if len(filtered_data) == 0:
            st.warning("Nenhum registro encontrado com os filtros selecionados.")
        else:
            # An√°lise de taxas de sucesso por estrat√©gia
            st.subheader("Taxa de Sucesso por Estrat√©gia")
            
            strategy_success = filtered_data.groupby('estrategia_cobranca')['sucesso_cobranca'].mean().reset_index()
            strategy_success.columns = ['Estrat√©gia', 'Taxa de Sucesso']
            strategy_success['Taxa de Sucesso'] = strategy_success['Taxa de Sucesso'] * 100
            
            # Ordenar do mais efetivo para o menos
            strategy_success = strategy_success.sort_values('Taxa de Sucesso', ascending=False)
            
            fig = px.bar(
                strategy_success,
                x='Estrat√©gia',
                y='Taxa de Sucesso',
                title="Taxa de Sucesso por Estrat√©gia (%)",
                labels={'Taxa de Sucesso': 'Taxa de Sucesso (%)'},
                color='Taxa de Sucesso',
                color_continuous_scale='Viridis'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # An√°lise por faixa de valor
            st.subheader("Sucesso por Faixa de Valor")
            
            # Criar bins para valores
            filtered_data['faixa_valor'] = pd.cut(
                filtered_data['valor_atraso'],
                bins=[0, 2000, 5000, 10000, 20000],
                labels=['At√© R$2.000', 'R$2.001 - R$5.000', 'R$5.001 - R$10.000', 'Acima de R$10.000']
            )
            
            # An√°lise cruzada de estrat√©gia x faixa de valor
            value_strategy = pd.crosstab(
                filtered_data['faixa_valor'],
                filtered_data['estrategia_cobranca'],
                values=filtered_data['sucesso_cobranca'],
                aggfunc='mean'
            ) * 100
            
            # Gr√°fico de calor
            fig = px.imshow(
                value_strategy,
                title="Taxa de Sucesso por Estrat√©gia e Faixa de Valor (%)",
                labels=dict(x="Estrat√©gia", y="Faixa de Valor", color="Taxa de Sucesso (%)"),
                color_continuous_scale='Viridis',
                text_auto='.1f'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # An√°lise por dias de atraso
            st.subheader("Sucesso por Dias de Atraso")
            
            filtered_data['faixa_atraso'] = pd.cut(
                filtered_data['dias_atraso'],
                bins=[0, 30, 60, 90, 180],
                labels=['At√© 30 dias', '31-60 dias', '61-90 dias', 'Mais de 90 dias']
            )
            
            # Taxa de sucesso por faixa de atraso
            atraso_success = filtered_data.groupby('faixa_atraso')['sucesso_cobranca'].mean().reset_index()
            atraso_success.columns = ['Faixa de Atraso', 'Taxa de Sucesso']
            atraso_success['Taxa de Sucesso'] = atraso_success['Taxa de Sucesso'] * 100
            
            fig = px.bar(
                atraso_success,
                x='Faixa de Atraso',
                y='Taxa de Sucesso',
                title="Taxa de Sucesso por Faixa de Atraso (%)",
                color='Taxa de Sucesso',
                color_continuous_scale='Viridis'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # An√°lise cruzada de estrat√©gia x faixa de atraso
            atraso_strategy = pd.crosstab(
                filtered_data['faixa_atraso'],
                filtered_data['estrategia_cobranca'],
                values=filtered_data['sucesso_cobranca'],
                aggfunc='mean'
            ) * 100
            
            # Gr√°fico de calor
            fig = px.imshow(
                atraso_strategy,
                title="Taxa de Sucesso por Estrat√©gia e Faixa de Atraso (%)",
                labels=dict(x="Estrat√©gia", y="Faixa de Atraso", color="Taxa de Sucesso (%)"),
                color_continuous_scale='Viridis',
                text_auto='.1f'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # An√°lise de proposta de negocia√ß√£o
            st.subheader("Impacto da Proposta de Negocia√ß√£o")
            
            proposta_impact = filtered_data.groupby(['estrategia_cobranca', 'proposta_negociacao'])['sucesso_cobranca'].mean().reset_index()
            proposta_impact['proposta_negociacao'] = proposta_impact['proposta_negociacao'].map({0: 'Sem Proposta', 1: 'Com Proposta'})
            proposta_impact['Taxa de Sucesso'] = proposta_impact['sucesso_cobranca'] * 100
            
            fig = px.bar(
                proposta_impact,
                x='estrategia_cobranca',
                y='Taxa de Sucesso',
                color='proposta_negociacao',
                barmode='group',
                title="Impacto da Proposta de Negocia√ß√£o por Estrat√©gia",
                labels={
                    'estrategia_cobranca': 'Estrat√©gia',
                    'proposta_negociacao': 'Proposta de Negocia√ß√£o'
                }
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Conclus√µes e insights
            st.subheader("Insights sobre Estrat√©gias")
            
            # Determinar a melhor estrat√©gia geral
            best_strategy = strategy_success.iloc[0]['Estrat√©gia']
            best_rate = strategy_success.iloc[0]['Taxa de Sucesso']
            
            # Determinar a melhor estrat√©gia por faixa de valor
            best_by_value = {}
            for faixa in value_strategy.index:
                best = value_strategy.loc[faixa].idxmax()
                best_by_value[faixa] = best
            
            # Determinar a melhor estrat√©gia por faixa de atraso
            best_by_days = {}
            for faixa in atraso_strategy.index:
                best = atraso_strategy.loc[faixa].idxmax()
                best_by_days[faixa] = best
            
            # Impacto da proposta
            proposta_diff = proposta_impact.pivot(
                index='estrategia_cobranca', 
                columns='proposta_negociacao', 
                values='Taxa de Sucesso'
            )
            proposta_diff['diferenca'] = proposta_diff['Com Proposta'] - proposta_diff['Sem Proposta']
            best_proposta_impact = proposta_diff['diferenca'].idxmax()
            
            # Exibir insights
            st.write(f"""
            #### Principais descobertas:
            
            1. **Estrat√©gia mais efetiva em geral**: {best_strategy} (taxa de sucesso de {best_rate:.1f}%)
            
            2. **Estrat√©gia recomendada por faixa de valor**:
               - {best_by_value.get('At√© R$2.000', 'N/A')} para valores at√© R$2.000
               - {best_by_value.get('R$2.001 - R$5.000', 'N/A')} para valores entre R$2.001 e R$5.000
               - {best_by_value.get('R$5.001 - R$10.000', 'N/A')} para valores entre R$5.001 e R$10.000
               - {best_by_value.get('Acima de R$10.000', 'N/A')} para valores acima de R$10.000
            
            3. **Estrat√©gia recomendada por tempo de atraso**:
               - {best_by_days.get('At√© 30 dias', 'N/A')} para atrasos at√© 30 dias
               - {best_by_days.get('31-60 dias', 'N/A')} para atrasos entre 31 e 60 dias
               - {best_by_days.get('61-90 dias', 'N/A')} para atrasos entre 61 e 90 dias
               - {best_by_days.get('Mais de 90 dias', 'N/A')} para atrasos acima de 90 dias
            
            4. **Impacto da proposta de negocia√ß√£o**: A estrat√©gia {best_proposta_impact} apresenta o maior ganho de efetividade quando inclui uma proposta de negocia√ß√£o.
            """)
            
            # Recomenda√ß√µes
            st.info("""
            üí° **Recomenda√ß√µes para otimizar a recupera√ß√£o**:
            
            1. **Estrat√©gias personalizadas**: Adequar a estrat√©gia de cobran√ßa conforme o perfil da d√≠vida (valor e tempo)
            2. **Priorizar propostas de negocia√ß√£o**: Incluir propostas de negocia√ß√£o aumenta significativamente as taxas de recupera√ß√£o
            3. **Contato precoce**: A taxa de recupera√ß√£o cai substancialmente ap√≥s 90 dias de atraso
            4. **Segmenta√ß√£o de carteira**: Dividir a carteira por faixas de valor e aplicar estrat√©gias espec√≠ficas
            """)

    with tab3:
        st.subheader("Simulador de Recupera√ß√£o de Cr√©dito")
        
        st.write("""
        Este simulador permite prever a probabilidade de recupera√ß√£o de um cr√©dito 
        espec√≠fico e testar diferentes estrat√©gias para otimizar as chances de sucesso.
        """)
        
        # Dados do cliente/d√≠vida
        st.subheader("Dados do Cliente e da D√≠vida")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Caracter√≠sticas do cliente
            cliente_idade = st.slider("Idade do Cliente:", 18, 75, 35)
            cliente_renda = st.slider("Renda Anual (R$):", 0, 150000, 60000, 5000)
            cliente_tempo_emprego = st.slider("Tempo de Emprego (anos):", 0, 40, 5)
            cliente_tempo_residencia = st.slider("Tempo de Resid√™ncia (anos):", 0, 20, 3)
        
        with col2:
            # Caracter√≠sticas da d√≠vida
            cliente_valor_atraso = st.slider("Valor em Atraso (R$):", 500, 20000, 5000, 500)
            cliente_dias_atraso = st.slider("Dias em Atraso:", 10, 180, 45)
            cliente_qtd_contas = st.slider("Quantidade de Contas:", 1, 10, 2)
            cliente_atrasos_anteriores = st.slider("Atrasos Anteriores:", 0, 12, 1)
        
        # Estrat√©gia de cobran√ßa
        st.subheader("Estrat√©gia de Cobran√ßa")
        
        col1, col2 = st.columns(2)
        
        with col1:
            cliente_estrategia = st.selectbox(
                "Estrat√©gia de Contato:",
                options=['SMS', 'E-mail', 'Liga√ß√£o', 'Carta', 'Visita']
            )
            
            cliente_contatos = st.slider(
                "N√∫mero de Tentativas de Contato:",
                1, 10, 3
            )
        
        with col2:
            cliente_proposta = st.radio(
                "Incluir Proposta de Negocia√ß√£o?",
                options=["Sim", "N√£o"],
                horizontal=True
            )
            
            cliente_desconto = st.slider(
                "Percentual de Desconto Oferecido (%):",
                0, 50, 15, 5,
                disabled=(cliente_proposta == "N√£o")
            )
        
        # Calculadora de probabilidade
        if st.button("Calcular Probabilidade de Recupera√ß√£o", type="primary"):
            # Criar caracter√≠sticas para o modelo
            base_proba = 0.3  # probabilidade base
            
            # Ajustes baseados nas caracter√≠sticas
            prob_ajuste = (
                - 0.001 * cliente_dias_atraso 
                + 0.02 * (cliente_contatos > 3)
                + 0.15 * (cliente_proposta == "Sim")
                - 0.00005 * cliente_valor_atraso
                + 0.0000005 * cliente_renda
                + 0.005 * cliente_tempo_emprego
                - 0.05 * cliente_atrasos_anteriores
                + 0.01 * (cliente_desconto / 10)
            )
            
            # Ajuste pela estrat√©gia
            estrategia_bonus = {
                'SMS': 0.05,
                'E-mail': 0.02,
                'Liga√ß√£o': 0.15,
                'Carta': 0.08,
                'Visita': 0.25
            }
            
            prob_ajuste += estrategia_bonus[cliente_estrategia]
            
            # Probabilidade final
            prob_sucesso = np.clip(base_proba + prob_ajuste, 0.01, 0.95)
            
            # Exibir resultado
            st.subheader("Resultado da An√°lise")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Gauge para probabilidade
                fig = go.Figure(go.Indicator(
                    mode = "gauge+number",
                    value = prob_sucesso * 100,
                    domain = {'x': [0, 1], 'y': [0, 1]},
                    title = {'text': "Probabilidade de Recupera√ß√£o (%)"},
                    gauge = {
                        'axis': {'range': [0, 100]},
                        'bar': {'color': "darkblue"},
                        'steps' : [
                            {'range': [0, 30], 'color': "red"},
                            {'range': [30, 70], 'color': "orange"},
                            {'range': [70, 100], 'color': "green"}
                        ],
                        'threshold': {
                            'line': {'color': "black", 'width': 4},
                            'thickness': 0.75,
                            'value': prob_sucesso * 100
                        }
                    }
                ))
                st.plotly_chart(fig, use_container_width=True)
                
                # Resultado estimado
                resultado_esperado = "Recupera√ß√£o Incerta"
                if prob_sucesso < 0.3:
                    resultado_esperado = "Baixa Chance de Recupera√ß√£o"
                    resultado_color = "red"
                elif prob_sucesso < 0.6:
                    resultado_esperado = "Recupera√ß√£o Poss√≠vel"
                    resultado_color = "orange"
                else:
                    resultado_esperado = "Alta Chance de Recupera√ß√£o"
                    resultado_color = "green"
                
                st.markdown(f"### Resultado: <span style='color:{resultado_color}'>{resultado_esperado}</span>", unsafe_allow_html=True)
            
            with col2:
                # Impacto de cada fator
                st.subheader("Fatores de Impacto")
                
                # Lista de fatores e seus impactos
                fatores = [
                    {"fator": "Estrat√©gia de contato", "impacto": estrategia_bonus[cliente_estrategia] * 100},
                    {"fator": "Dias em atraso", "impacto": -0.1 * cliente_dias_atraso},
                    {"fator": "Proposta de negocia√ß√£o", "impacto": 15 if cliente_proposta == "Sim" else 0},
                    {"fator": "N√∫mero de contatos", "impacto": 2 * cliente_contatos},
                    {"fator": "Desconto oferecido", "impacto": cliente_desconto * 0.3 if cliente_proposta == "Sim" else 0},
                    {"fator": "Hist√≥rico de atrasos", "impacto": -5 * cliente_atrasos_anteriores}
                ]
                
                # Ordenar por impacto absoluto
                fatores_df = pd.DataFrame(fatores)
                fatores_df['abs_impacto'] = fatores_df['impacto'].abs()
                fatores_df = fatores_df.sort_values('abs_impacto', ascending=False).head(5)
                
                # Criar gr√°fico de barras horizontais
                fatores_df['cor'] = fatores_df['impacto'].apply(
                    lambda x: 'green' if x > 0 else 'red'
                )
                
                fig = px.bar(
                    fatores_df,
                    y='fator',
                    x='impacto',
                    orientation='h',
                    title="Impacto dos Fatores na Probabilidade",
                    labels={'impacto': 'Impacto (%)', 'fator': 'Fator'},
                    color='cor',
                    color_discrete_map={'green': 'green', 'red': 'red'}
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # Recomenda√ß√µes para aumentar a chance de recupera√ß√£o
            st.subheader("Recomenda√ß√µes para Aumentar a Chance de Recupera√ß√£o")
            
            recomendacoes = []
            
            if cliente_proposta == "N√£o":
                recomendacoes.append("‚Ä¢ **Fazer uma proposta de negocia√ß√£o** pode aumentar significativamente as chances de recupera√ß√£o.")
            
            if cliente_contatos < 5:
                recomendacoes.append("‚Ä¢ **Aumentar o n√∫mero de tentativas de contato** para pelo menos 5 pode melhorar o engajamento.")
            
            if cliente_estrategia != 'Visita' and cliente_valor_atraso > 10000:
                recomendacoes.append("‚Ä¢ Para valores altos (>R$10.000), considere usar **visita presencial** como estrat√©gia.")
            
            if cliente_estrategia != 'Liga√ß√£o' and cliente_dias_atraso > 60:
                recomendacoes.append("‚Ä¢ Para atrasos longos (>60 dias), **liga√ß√µes diretas** tendem a ser mais efetivas.")
            
            if cliente_desconto < 20 and cliente_proposta == "Sim" and cliente_dias_atraso > 90:
                recomendacoes.append("‚Ä¢ Para d√≠vidas antigas (>90 dias), considere **aumentar o desconto oferecido** para pelo menos 25%.")
            
            if cliente_dias_atraso > 120:
                recomendacoes.append("‚Ä¢ Esta d√≠vida est√° em atraso h√° muito tempo. Considere **terceirizar a cobran√ßa** ou oferecer um **desconto significativo** para recupera√ß√£o parcial.")
            
            if not recomendacoes:
                recomendacoes.append("‚Ä¢ Sua estrat√©gia atual est√° bem otimizada para este caso espec√≠fico.")
            
            for rec in recomendacoes:
                st.markdown(rec)
            
            # Compara√ß√£o com estrat√©gias alternativas
            st.subheader("Compara√ß√£o com Estrat√©gias Alternativas")
            
            # Criar DataFrame de compara√ß√£o
            estrategias = ['SMS', 'Email', 'Liga√ß√£o', 'Carta', 'Visita']
            propostas = ['Com proposta', 'Sem proposta']
            
            comparison_data = []
            
            # Estrat√©gia atual (para destacar)
            estrategia_atual = cliente_estrategia
            proposta_atual = "Com proposta" if cliente_proposta == "Sim" else "Sem proposta"
            
            for e in estrategias:
                for p in propostas:
                    # Calcular probabilidade para esta combina√ß√£o
                    temp_prob = base_proba
                    
                    # Ajuste para estrat√©gia
                    if e == 'SMS':
                        temp_prob *= 0.8
                    elif e == 'Email':
                        temp_prob *= 0.9
                    elif e == 'Liga√ß√£o':
                        temp_prob *= 1.2
                    elif e == 'Carta':
                        temp_prob *= 0.7
                    elif e == 'Visita':
                        temp_prob *= 1.5
                    
                    # Ajuste para proposta
                    if p == 'Com proposta':
                        temp_prob *= 1.4
                    
                    # Verificar se √© a estrat√©gia atual
                    is_current = (e == estrategia_atual) and (p == proposta_atual)
                    
                    comparison_data.append({
                        'Estrat√©gia': e,
                        'Proposta': p,
                        'Probabilidade': min(temp_prob * 100, 99.9),
                        'Atual': is_current
                    })
            
            # Criar DataFrame e ordenar por probabilidade
            comparison_df = pd.DataFrame(comparison_data).sort_values('Probabilidade', ascending=False)
            
            # Fun√ß√£o para destacar a estrat√©gia atual
            def highlight_current(s):
                is_current = s['Atual']
                return ['background-color: #a8d08d' if is_current else '' for _ in s]
            
            # Criar DataFrame para exibi√ß√£o (sem a coluna 'Atual')
            display_df = comparison_df[['Estrat√©gia', 'Proposta', 'Probabilidade']]
            
            # Aplicar formata√ß√£o e exibir
            st.dataframe(
                display_df.style.apply(
                    lambda row: ['background-color: #a8d08d' if comparison_df.iloc[row.name]['Atual'] else '' for _ in row],
                    axis=1
                ),
                use_container_width=True
            )
            
            # Mostrar estrat√©gia √≥tima
            best_strategy = comparison_df.iloc[0]
            
            if not best_strategy['Atual']:
                st.success(f"""
                **Estrat√©gia √ìtima Recomendada**: {best_strategy['Estrat√©gia']} com 
                {best_strategy['Proposta']} para proposta de negocia√ß√£o.
                
                Esta combina√ß√£o poderia aumentar a probabilidade de recupera√ß√£o para 
                {best_strategy['Probabilidade']:.1f}%, um ganho de 
                {best_strategy['Probabilidade'] - prob_sucesso * 100:.1f} pontos percentuais.
                """)
            else:
                st.success("Voc√™ j√° est√° usando a estrat√©gia √≥tima para este caso!")

# Sidebar com op√ß√µes do app
st.sidebar.title("CreditWise")
st.sidebar.image("https://www.svgrepo.com/show/530453/financial-profit.svg", width=100)

app_mode = st.sidebar.selectbox(
    "Selecione o M√≥dulo",
    ["Vis√£o Geral", "Modelo de Cr√©dito", "An√°lise de Cobran√ßa", "Previs√£o de Fluxo de Caixa", "Simula√ß√£o de Portf√≥lio", "Simulador de Cr√©dito"]
)

# Vis√£o Geral
if app_mode == "Vis√£o Geral":
    st.title("CreditWise - An√°lise de Risco e Cobran√ßa üí≥")
    # ... c√≥digo existente ...

# Modelo de Cr√©dito
elif app_mode == "Modelo de Cr√©dito":
    # ... c√≥digo existente ...
    pass

# An√°lise de Cobran√ßa
elif app_mode == "An√°lise de Cobran√ßa":
    # ... c√≥digo existente ...
    pass

# Previs√£o de Fluxo de Caixa
elif app_mode == "Previs√£o de Fluxo de Caixa":
    st.title("Previs√£o de Fluxo de Caixa üìà")
    st.write("""
    Este m√≥dulo permite prever as receitas futuras baseadas na recupera√ß√£o de cr√©dito prevista.
    Visualize o impacto das estrat√©gias de recupera√ß√£o no seu fluxo de caixa ao longo do tempo.
    """)
    
    # Par√¢metros de entrada
    st.header("Par√¢metros de Previs√£o")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Par√¢metros relacionados √† carteira
        st.subheader("Carteira de Cr√©dito")
        
        total_portfolio = st.number_input(
            "Valor Total da Carteira (R$)",
            min_value=10000.0,
            max_value=10000000.0,
            value=1000000.0,
            step=50000.0,
            format="%.2f"
        )
        
        num_accounts = st.number_input(
            "N√∫mero de Contas",
            min_value=10,
            max_value=10000,
            value=500,
            step=10
        )
        
        avg_account_value = total_portfolio / num_accounts
        st.metric("Valor M√©dio por Conta", f"R$ {avg_account_value:.2f}")
        
        portfolio_age = st.slider(
            "Idade M√©dia da Carteira (dias)",
            min_value=30,
            max_value=365,
            value=120,
            step=15
        )
        
    with col2:
        # Par√¢metros de estrat√©gia de recupera√ß√£o
        st.subheader("Estrat√©gia de Recupera√ß√£o")
        
        recovery_rate = st.slider(
            "Taxa de Recupera√ß√£o Esperada (%)",
            min_value=10.0,
            max_value=90.0,
            value=40.0,
            step=5.0
        )
        
        recovery_time = st.slider(
            "Tempo para Recupera√ß√£o (meses)",
            min_value=1,
            max_value=24,
            value=6,
            step=1
        )
        
        recovery_curve = st.selectbox(
            "Curva de Recupera√ß√£o",
            ["Linear", "Exponencial Decrescente", "Sigmoide", "Personalizada"]
        )
        
        operational_costs = st.slider(
            "Custos Operacionais (%)",
            min_value=5.0,
            max_value=50.0,
            value=20.0,
            step=2.5
        )
    
    # Aplicar simula√ß√£o
    if st.button("Gerar Previs√£o de Fluxo de Caixa"):
        # Calcular previs√£o de fluxo
        st.header("Previs√£o de Fluxo de Caixa")
        
        # Criar dataframe com previs√£o
        months = list(range(1, recovery_time + 1))
        recovery_data = []
        
        # Calcular valores para cada m√™s baseado na curva selecionada
        total_recovery_value = total_portfolio * (recovery_rate / 100)
        
        if recovery_curve == "Linear":
            monthly_values = [total_recovery_value / recovery_time] * recovery_time
        
        elif recovery_curve == "Exponencial Decrescente":
            # Peso maior nos primeiros meses
            factor = 1.5
            weights = [np.exp(-factor * i / recovery_time) for i in range(recovery_time)]
            total_weight = sum(weights)
            monthly_values = [(w / total_weight) * total_recovery_value for w in weights]
            
        elif recovery_curve == "Sigmoide":
            # Recupera√ß√£o concentrada no meio do per√≠odo
            center = recovery_time / 2
            steepness = 5 / recovery_time
            weights = [1 / (1 + np.exp(-steepness * (i - center))) - 
                       1 / (1 + np.exp(-steepness * ((i-1) - center))) for i in range(1, recovery_time + 1)]
            # Ajustar para garantir que soma seja 1
            total_weight = sum(weights)
            monthly_values = [(w / total_weight) * total_recovery_value for w in weights]
        
        else:  # Personalizada - exemplo simples
            # Mais nos meses 2-4
            custom_weights = [0.1, 0.2, 0.25, 0.2, 0.15, 0.1]
            if len(custom_weights) < recovery_time:
                custom_weights.extend([0.05] * (recovery_time - len(custom_weights)))
            custom_weights = custom_weights[:recovery_time]  # Truncar se for maior
            # Normalizar pesos
            total_weight = sum(custom_weights)
            normalized_weights = [w / total_weight for w in custom_weights]
            monthly_values = [w * total_recovery_value for w in normalized_weights]
        
        # Calcular acumulado e outros dados para an√°lise
        cumulative_recovery = 0
        
        for i, month in enumerate(months):
            monthly_recovery = monthly_values[i]
            cumulative_recovery += monthly_recovery
            monthly_cost = monthly_recovery * (operational_costs / 100)
            monthly_net = monthly_recovery - monthly_cost
            
            recovery_data.append({
                'M√™s': month,
                'Recupera√ß√£o Mensal': monthly_recovery,
                'Recupera√ß√£o Acumulada': cumulative_recovery,
                'Custos Operacionais': monthly_cost,
                'L√≠quido Mensal': monthly_net,
                'L√≠quido Acumulado': cumulative_recovery - (monthly_recovery * (operational_costs / 100) * month)
            })
        
        df_recovery = pd.DataFrame(recovery_data)
        
        # Gr√°ficos e visualiza√ß√µes
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de recupera√ß√£o mensal vs acumulada
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                x=df_recovery['M√™s'],
                y=df_recovery['Recupera√ß√£o Mensal'],
                name='Recupera√ß√£o Mensal',
                marker_color='#3366CC'
            ))
            
            fig.add_trace(go.Scatter(
                x=df_recovery['M√™s'],
                y=df_recovery['Recupera√ß√£o Acumulada'],
                name='Recupera√ß√£o Acumulada',
                marker_color='#FF9900',
                mode='lines+markers'
            ))
            
            fig.update_layout(
                title='Recupera√ß√£o Mensal vs. Acumulada',
                xaxis_title='M√™s',
                yaxis_title='Valor (R$)',
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Gr√°fico de fluxo l√≠quido
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                x=df_recovery['M√™s'],
                y=df_recovery['L√≠quido Mensal'],
                name='L√≠quido Mensal',
                marker_color='#109618'
            ))
            
            fig.add_trace(go.Scatter(
                x=df_recovery['M√™s'],
                y=df_recovery['L√≠quido Acumulado'],
                name='L√≠quido Acumulado',
                marker_color='#DC3912',
                mode='lines+markers'
            ))
            
            fig.update_layout(
                title='Fluxo de Caixa L√≠quido',
                xaxis_title='M√™s',
                yaxis_title='Valor (R$)',
                legend=dict(
                    orientation="h",
                    yanchor="bottom",
                    y=1.02,
                    xanchor="right",
                    x=1
                )
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Indicadores de performance
        st.subheader("Indicadores de Performance")
        
        # KPIs em colunas
        kpi1, kpi2, kpi3, kpi4 = st.columns(4)
        
        with kpi1:
            # Total recuperado
            final_recovery = df_recovery['Recupera√ß√£o Acumulada'].iloc[-1]
            recovery_percent = (final_recovery / total_portfolio) * 100
            
            st.metric(
                "Total Recuperado", 
                f"R$ {final_recovery:,.2f}",
                f"{recovery_percent:.1f}% da carteira"
            )
        
        with kpi2:
            # L√≠quido ap√≥s custos
            final_net = df_recovery['L√≠quido Acumulado'].iloc[-1]
            net_percent = (final_net / total_portfolio) * 100
            
            st.metric(
                "L√≠quido Final", 
                f"R$ {final_net:,.2f}",
                f"{net_percent:.1f}% da carteira"
            )
            
        with kpi3:
            # Tempo para recuperar 50%
            half_recovery = total_recovery_value * 0.5
            months_to_half = None
            
            for i, row in df_recovery.iterrows():
                if row['Recupera√ß√£o Acumulada'] >= half_recovery:
                    months_to_half = row['M√™s']
                    break
            
            if months_to_half:
                st.metric(
                    "Prazo para 50% da Recupera√ß√£o", 
                    f"{months_to_half} meses"
                )
            else:
                st.metric("Prazo para 50% da Recupera√ß√£o", "N/A")
        
        with kpi4:
            # ROI
            total_cost = df_recovery['Custos Operacionais'].sum()
            roi = ((final_recovery - total_cost) / total_cost) * 100
            
            st.metric(
                "ROI da Opera√ß√£o", 
                f"{roi:.1f}%"
            )
        
        # Tabela com os dados mensais
        st.subheader("Detalhamento Mensal")
        
        display_df = df_recovery.copy()
        
        # Formatar para visualiza√ß√£o
        display_cols = {
            'M√™s': 'M√™s',
            'Recupera√ß√£o Mensal': 'Recupera√ß√£o Mensal (R$)',
            'Recupera√ß√£o Acumulada': 'Recupera√ß√£o Acumulada (R$)',
            'Custos Operacionais': 'Custos Operacionais (R$)',
            'L√≠quido Mensal': 'L√≠quido Mensal (R$)',
            'L√≠quido Acumulado': 'L√≠quido Acumulado (R$)'
        }
        
        display_df = display_df.rename(columns=display_cols)
        
        # Formatar valores monet√°rios
        for col in display_df.columns:
            if 'R$' in col:
                display_df[col] = display_df[col].apply(lambda x: f"R$ {x:,.2f}")
        
        st.dataframe(display_df, use_container_width=True)
        
        # An√°lise de sensibilidade
        st.subheader("An√°lise de Sensibilidade")
        st.write("Veja como diferentes taxas de recupera√ß√£o afetam o resultado final.")
        
        # Criar dados para an√°lise de sensibilidade
        sensitivity_rates = [recovery_rate - 20, recovery_rate - 10, recovery_rate, recovery_rate + 10, recovery_rate + 20]
        sensitivity_rates = [max(10, min(rate, 90)) for rate in sensitivity_rates]  # Limitar entre 10% e 90%
        
        sensitivity_data = []
        
        for rate in sensitivity_rates:
            recovery_value = total_portfolio * (rate / 100)
            net_value = recovery_value * (1 - operational_costs / 100)
            
            sensitivity_data.append({
                'Taxa de Recupera√ß√£o (%)': rate,
                'Valor Recuperado (R$)': recovery_value,
                'Valor L√≠quido (R$)': net_value,
                'Percentual da Carteira (%)': (recovery_value / total_portfolio) * 100
            })
        
        df_sensitivity = pd.DataFrame(sensitivity_data)
        
        # Gr√°fico de sensibilidade
        fig = px.bar(
            df_sensitivity, 
            x='Taxa de Recupera√ß√£o (%)', 
            y='Valor Recuperado (R$)',
            color='Percentual da Carteira (%)',
            color_continuous_scale=px.colors.sequential.Viridis,
            labels={'Valor Recuperado (R$)': 'Valor Recuperado (R$)'},
            text_auto='.2s'
        )
        
        fig.update_layout(
            title='An√°lise de Sensibilidade por Taxa de Recupera√ß√£o',
            xaxis_title='Taxa de Recupera√ß√£o (%)',
            yaxis_title='Valor Recuperado (R$)'
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Recomenda√ß√µes
        st.subheader("Recomenda√ß√µes")
        
        st.markdown(f"""
        ### Com base na an√°lise de fluxo de caixa, recomendamos:
        
        - **Aloca√ß√£o de Recursos**: Concentrar esfor√ßos de cobran√ßa nos {months_to_half} primeiros meses, quando a taxa de recupera√ß√£o √© mais alta.
        
        - **Investimento em Estrat√©gias**: Um investimento adicional de at√© {(operational_costs * 0.25):.1f}% em custos operacionais pode ser justificado se aumentar a taxa de recupera√ß√£o em pelo menos {(operational_costs * 0.5):.1f}%.
        
        - **Prazo de Retorno**: O ponto de equil√≠brio ser√° atingido no m√™s {max(1, int(operational_costs / 10))}, com recupera√ß√£o superando custos acumulados.
        
        - **Risco de Carteira**: Diversificar a carteira para reduzir concentra√ß√£o e volatilidade nos fluxos mensais.
        """)
        
        st.info("Esta an√°lise √© baseada em proje√ß√µes estat√≠sticas. Os resultados reais podem variar dependendo de fatores externos e espec√≠ficos de cada cliente.")

# Simulador de Cr√©dito
elif app_mode == "Simulador de Cr√©dito":
    # ... c√≥digo existente ...
    pass

# Simula√ß√£o de Portf√≥lio
elif app_mode == "Simula√ß√£o de Portf√≥lio":
    st.title("Simula√ß√£o de Portf√≥lio de Cr√©dito üìä")
    st.write("""
    Este m√≥dulo permite simular diferentes composi√ß√µes de carteira de cr√©dito, analisar o impacto de estrat√©gias 
    de concess√£o e estimar como diversos cen√°rios econ√¥micos afetam o desempenho do portf√≥lio.
    """)
    
    # Tabs para as diferentes funcionalidades
    portfolio_tab = st.tabs(["Composi√ß√£o de Carteira", "An√°lise de Estrat√©gias", "Cen√°rios Econ√¥micos"])
    
    # Tab 1: Composi√ß√£o de Carteira
    with portfolio_tab[0]:
        st.subheader("Simula√ß√£o de Composi√ß√£o de Carteira")
        st.write("Configure diferentes perfis de risco para sua carteira e analise o impacto no retorno e inadimpl√™ncia.")
        
        # Par√¢metros do portf√≥lio
        st.write("### Configura√ß√£o da Carteira")
        
        # Definir o tamanho total da carteira
        total_portfolio_size = st.number_input(
            "Valor Total da Carteira (R$)",
            min_value=100000.0,
            max_value=100000000.0,
            value=10000000.0,
            step=1000000.0,
            format="%.2f"
        )
        
        # Configurar os segmentos da carteira
        st.write("### Distribui√ß√£o por Perfil de Risco")
        st.write("Defina a propor√ß√£o da carteira alocada para cada perfil de risco:")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribui√ß√£o entre perfis de risco
            risk_low = st.slider("Baixo Risco (%)", 0, 100, 30, 5)
            risk_medium = st.slider("M√©dio Risco (%)", 0, 100, 40, 5)
            risk_high = st.slider("Alto Risco (%)", 0, 100, 30, 5)
            
            # Verificar se a soma √© 100%
            total_risk = risk_low + risk_medium + risk_high
            if total_risk != 100:
                st.warning(f"A soma dos percentuais deve ser 100%. Atualmente: {total_risk}%")
            
            # Calcular valores por segmento
            low_value = total_portfolio_size * (risk_low / 100)
            medium_value = total_portfolio_size * (risk_medium / 100)
            high_value = total_portfolio_size * (risk_high / 100)
            
            # Mostrar distribui√ß√£o em valores
            st.write("### Valor por Segmento")
            st.metric("Baixo Risco", f"R$ {low_value:,.2f}")
            st.metric("M√©dio Risco", f"R$ {medium_value:,.2f}")
            st.metric("Alto Risco", f"R$ {high_value:,.2f}")
        
        with col2:
            # Par√¢metros por perfil de risco
            st.write("### Caracter√≠sticas por Perfil")
            
            # Taxas de juros por perfil
            st.write("**Taxas de Juros Anuais**")
            interest_low = st.slider("Taxa para Baixo Risco (%)", 5.0, 30.0, 12.0, 0.5)
            interest_medium = st.slider("Taxa para M√©dio Risco (%)", 10.0, 50.0, 24.0, 0.5)
            interest_high = st.slider("Taxa para Alto Risco (%)", 15.0, 80.0, 36.0, 0.5)
            
            # Taxas de inadimpl√™ncia por perfil
            st.write("**Taxas de Inadimpl√™ncia Esperadas**")
            default_low = st.slider("Inadimpl√™ncia em Baixo Risco (%)", 0.5, 10.0, 2.0, 0.5)
            default_medium = st.slider("Inadimpl√™ncia em M√©dio Risco (%)", 3.0, 20.0, 8.0, 0.5)
            default_high = st.slider("Inadimpl√™ncia em Alto Risco (%)", 10.0, 40.0, 25.0, 0.5)
        
        # Bot√£o para simular
        if st.button("Simular Composi√ß√£o de Carteira"):
            # C√°lculos para a simula√ß√£o
            
            # Receita esperada por segmento (juros)
            revenue_low = low_value * (interest_low / 100)
            revenue_medium = medium_value * (interest_medium / 100)
            revenue_high = high_value * (interest_high / 100)
            total_revenue = revenue_low + revenue_medium + revenue_high
            
            # Perdas esperadas por inadimpl√™ncia
            loss_low = low_value * (default_low / 100)
            loss_medium = medium_value * (default_medium / 100)
            loss_high = high_value * (default_high / 100)
            total_loss = loss_low + loss_medium + loss_high
            
            # Resultado l√≠quido
            net_low = revenue_low - loss_low
            net_medium = revenue_medium - loss_medium
            net_high = revenue_high - loss_high
            total_net = total_revenue - total_loss
            
            # ROI por segmento
            roi_low = (net_low / low_value) * 100
            roi_medium = (net_medium / medium_value) * 100
            roi_high = (net_high / high_value) * 100
            roi_total = (total_net / total_portfolio_size) * 100
            
            # Criar DataFrame com os resultados
            portfolio_data = {
                'Segmento': ['Baixo Risco', 'M√©dio Risco', 'Alto Risco', 'Total'],
                'Valor da Carteira (R$)': [low_value, medium_value, high_value, total_portfolio_size],
                'Receita Esperada (R$)': [revenue_low, revenue_medium, revenue_high, total_revenue],
                'Perda Esperada (R$)': [loss_low, loss_medium, loss_high, total_loss],
                'Resultado L√≠quido (R$)': [net_low, net_medium, net_high, total_net],
                'ROI (%)': [roi_low, roi_medium, roi_high, roi_total],
                'Inadimpl√™ncia (%)': [default_low, default_medium, default_high, (total_loss/total_portfolio_size)*100]
            }
            
            df_portfolio = pd.DataFrame(portfolio_data)
            
            # Exibir resultados
            st.write("## Resultados da Simula√ß√£o")
            
            # KPIs principais
            kpi1, kpi2, kpi3, kpi4 = st.columns(4)
            
            with kpi1:
                st.metric("Receita Total", f"R$ {total_revenue:,.2f}")
            
            with kpi2:
                st.metric("Perda por Inadimpl√™ncia", f"R$ {total_loss:,.2f}")
            
            with kpi3:
                st.metric("Resultado L√≠quido", f"R$ {total_net:,.2f}")
            
            with kpi4:
                st.metric("ROI da Carteira", f"{roi_total:.2f}%")
            
            # Gr√°ficos
            st.write("### An√°lise Visual")
            
            tab1, tab2, tab3 = st.tabs(["Composi√ß√£o", "Performance", "Risco-Retorno"])
            
            with tab1:
                # Gr√°fico de composi√ß√£o da carteira
                fig = px.pie(
                    df_portfolio[:-1],  # Excluir linha de total
                    values='Valor da Carteira (R$)',
                    names='Segmento',
                    title='Composi√ß√£o da Carteira por Segmento',
                    color='Segmento',
                    color_discrete_map={
                        'Baixo Risco': '#2ECC71',
                        'M√©dio Risco': '#F39C12',
                        'Alto Risco': '#E74C3C'
                    }
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with tab2:
                # Gr√°fico de barras comparando receita, perda e resultado l√≠quido
                fig = go.Figure()
                
                segments = df_portfolio['Segmento'][:-1]  # Excluir linha de total
                
                fig.add_trace(go.Bar(
                    x=segments,
                    y=df_portfolio['Receita Esperada (R$)'][:-1],
                    name='Receita',
                    marker_color='#3498DB'
                ))
                
                fig.add_trace(go.Bar(
                    x=segments,
                    y=df_portfolio['Perda Esperada (R$)'][:-1],
                    name='Perda',
                    marker_color='#E74C3C'
                ))
                
                fig.add_trace(go.Bar(
                    x=segments,
                    y=df_portfolio['Resultado L√≠quido (R$)'][:-1],
                    name='Resultado L√≠quido',
                    marker_color='#2ECC71'
                ))
                
                fig.update_layout(
                    title='Performance por Segmento',
                    xaxis_title='Segmento',
                    yaxis_title='Valor (R$)',
                    barmode='group',
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="center",
                        x=0.5
                    )
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            with tab3:
                # Gr√°fico de dispers√£o mostrando rela√ß√£o risco-retorno
                fig = px.scatter(
                    df_portfolio[:-1],  # Excluir linha de total
                    x='Inadimpl√™ncia (%)',
                    y='ROI (%)',
                    size='Valor da Carteira (R$)',
                    color='Segmento',
                    color_discrete_map={
                        'Baixo Risco': '#2ECC71',
                        'M√©dio Risco': '#F39C12',
                        'Alto Risco': '#E74C3C'
                    },
                    title='Rela√ß√£o Risco-Retorno por Segmento',
                    labels={
                        'Inadimpl√™ncia (%)': 'Risco (Taxa de Inadimpl√™ncia %)',
                        'ROI (%)': 'Retorno (ROI %)'
                    },
                    size_max=60
                )
                
                # Adicionar linha m√©dia
                fig.add_shape(
                    type="line",
                    x0=df_portfolio['Inadimpl√™ncia (%)'].min() - 1,
                    y0=roi_total,
                    x1=df_portfolio['Inadimpl√™ncia (%)'].max() + 1,
                    y1=roi_total,
                    line=dict(
                        color="gray",
                        width=2,
                        dash="dash",
                    )
                )
                
                fig.update_layout(
                    xaxis_title='Risco (Taxa de Inadimpl√™ncia %)',
                    yaxis_title='Retorno (ROI %)'
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            # Tabela com resultados detalhados
            st.write("### Detalhamento dos Resultados")
            
            # Formatar o DataFrame para exibi√ß√£o
            display_df = df_portfolio.copy()
            format_cols = ['Valor da Carteira (R$)', 'Receita Esperada (R$)', 'Perda Esperada (R$)', 'Resultado L√≠quido (R$)']
            
            for col in format_cols:
                display_df[col] = display_df[col].apply(lambda x: f"R$ {x:,.2f}")
            
            display_df['ROI (%)'] = display_df['ROI (%)'].apply(lambda x: f"{x:.2f}%")
            display_df['Inadimpl√™ncia (%)'] = display_df['Inadimpl√™ncia (%)'].apply(lambda x: f"{x:.2f}%")
            
            # Destacar a linha de total
            def highlight_total(s):
                return ['background-color: #f0f0f0; font-weight: bold' if s.Segmento == 'Total' else '' for _ in s]
            
            # Exibir tabela formatada
            st.dataframe(
                display_df.style.apply(highlight_total, axis=1),
                use_container_width=True
            )
            
            # Recomenda√ß√µes
            st.write("### Recomenda√ß√µes")
            
            recommendations = []
            
            # Avaliar composi√ß√£o da carteira
            if roi_low > roi_medium and roi_low > roi_high:
                recommendations.append("- Considere **aumentar a propor√ß√£o de Baixo Risco** na carteira, pois este segmento apresenta o melhor ROI.")
            elif roi_medium > roi_low and roi_medium > roi_high:
                recommendations.append("- Considere **aumentar a propor√ß√£o de M√©dio Risco** na carteira, pois este segmento apresenta o melhor ROI.")
            elif roi_high > roi_low and roi_high > roi_medium:
                recommendations.append("- Considere **aumentar a propor√ß√£o de Alto Risco** na carteira, pois este segmento apresenta o melhor ROI, apesar da maior inadimpl√™ncia.")
            
            # Avaliar taxas de juros
            if roi_low < 5:
                recommendations.append("- As taxas para o segmento de **Baixo Risco** podem estar muito baixas considerando a inadimpl√™ncia.")
            if roi_medium < 10:
                recommendations.append("- As taxas para o segmento de **M√©dio Risco** podem estar muito baixas considerando a inadimpl√™ncia.")
            if roi_high < 15:
                recommendations.append("- As taxas para o segmento de **Alto Risco** podem estar muito baixas considerando a inadimpl√™ncia.")
            
            # Avaliar equil√≠brio risco-retorno
            if roi_total < 5:
                recommendations.append("- O **retorno geral da carteira est√° baixo**. Considere ajustar taxas de juros ou reduzir exposi√ß√£o a segmentos com maior inadimpl√™ncia.")
            
            if (total_loss/total_portfolio_size)*100 > 15:
                recommendations.append("- A **perda por inadimpl√™ncia est√° alta** (>15% da carteira). Considere melhorar crit√©rios de concess√£o ou estrat√©gias de cobran√ßa.")
            
            # Exibir recomenda√ß√µes
            if recommendations:
                for rec in recommendations:
                    st.markdown(rec)
            else:
                st.success("A composi√ß√£o atual da carteira apresenta um bom equil√≠brio entre risco e retorno.")
                
            # Adicionar op√ß√£o de download dos resultados
            csv = df_portfolio.to_csv(index=False)
            st.download_button(
                label="Download dos Resultados (CSV)",
                data=csv,
                file_name="simulacao_portfolio.csv",
                mime="text/csv",
            )

    # Tab 2: An√°lise de Estrat√©gias
    with portfolio_tab[1]:
        st.subheader("Impacto de Estrat√©gias de Concess√£o")
        st.write("Avalie como diferentes crit√©rios de aprova√ß√£o de cr√©dito impactam o desempenho da carteira.")
        
        # Par√¢metros da simula√ß√£o
        st.write("### Configura√ß√µes da Simula√ß√£o")
        
        # Volume de solicita√ß√µes
        applications_volume = st.number_input(
            "Volume de Solicita√ß√µes de Cr√©dito (mensal)",
            min_value=100,
            max_value=100000,
            value=1000,
            step=100
        )
        
        # Ticket m√©dio
        average_ticket = st.number_input(
            "Ticket M√©dio (R$)",
            min_value=1000.0,
            max_value=100000.0,
            value=5000.0,
            step=1000.0,
            format="%.2f"
        )
        
        # Distribui√ß√£o do score de cr√©dito dos solicitantes
        st.write("### Distribui√ß√£o dos Solicitantes por Score")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Configurar distribui√ß√£o de solicitantes por faixa de score
            score_very_low = st.slider("Score Muito Baixo (0-300)", 0, 100, 15, 5)
            score_low = st.slider("Score Baixo (301-500)", 0, 100, 25, 5)
            score_medium = st.slider("Score M√©dio (501-700)", 0, 100, 30, 5)
            score_high = st.slider("Score Alto (701-850)", 0, 100, 20, 5)
            score_very_high = st.slider("Score Muito Alto (851-1000)", 0, 100, 10, 5)
            
            # Verificar se a soma √© 100%
            total_score = score_very_low + score_low + score_medium + score_high + score_very_high
            if total_score != 100:
                st.warning(f"A soma dos percentuais deve ser 100%. Atualmente: {total_score}%")
        
        with col2:
            # Par√¢metros de inadimpl√™ncia por faixa de score
            st.write("### Taxa de Inadimpl√™ncia por Faixa de Score")
            
            default_very_low = st.slider("Inadimpl√™ncia em Score Muito Baixo (%)", 20.0, 90.0, 60.0, 5.0)
            default_low = st.slider("Inadimpl√™ncia em Score Baixo (%)", 10.0, 50.0, 30.0, 2.5)
            default_medium = st.slider("Inadimpl√™ncia em Score M√©dio (%)", 5.0, 25.0, 15.0, 1.0)
            default_high = st.slider("Inadimpl√™ncia em Score Alto (%)", 1.0, 15.0, 5.0, 0.5)
            default_very_high = st.slider("Inadimpl√™ncia em Score Muito Alto (%)", 0.1, 5.0, 1.0, 0.1)
        
        # Configura√ß√£o de estrat√©gias de aprova√ß√£o
        st.write("### Estrat√©gias de Aprova√ß√£o")
        st.write("Configure diferentes estrat√©gias de corte de score para aprova√ß√£o de cr√©dito:")
        
        # Criar tabs para diferentes estrat√©gias
        strategy_tabs = st.tabs(["Conservadora", "Moderada", "Agressiva", "Personalizada"])
        
        # Definir cut-offs por estrat√©gia
        with strategy_tabs[0]:  # Conservadora
            st.write("#### Estrat√©gia Conservadora")
            st.write("Apenas aprova solicitantes com score alto ou muito alto (> 700)")
            strategy_conservative = {
                'nome': 'Conservadora',
                'muito_baixo': False,
                'baixo': False,
                'medio': False,
                'alto': True,
                'muito_alto': True,
                'taxa_juros': 15.0
            }
            
            st.write("**Taxa de Juros M√©dia:** 15%")
            st.write("**Taxa de Aprova√ß√£o Esperada:** ~30%")
            
        with strategy_tabs[1]:  # Moderada
            st.write("#### Estrat√©gia Moderada")
            st.write("Aprova solicitantes com score m√©dio ou superior (> 500)")
            strategy_moderate = {
                'nome': 'Moderada',
                'muito_baixo': False,
                'baixo': False,
                'medio': True,
                'alto': True,
                'muito_alto': True,
                'taxa_juros': 22.0
            }
            
            st.write("**Taxa de Juros M√©dia:** 22%")
            st.write("**Taxa de Aprova√ß√£o Esperada:** ~60%")
            
        with strategy_tabs[2]:  # Agressiva
            st.write("#### Estrat√©gia Agressiva")
            st.write("Aprova solicitantes com score baixo ou superior (> 300)")
            strategy_aggressive = {
                'nome': 'Agressiva',
                'muito_baixo': False,
                'baixo': True,
                'medio': True,
                'alto': True,
                'muito_alto': True,
                'taxa_juros': 30.0
            }
            
            st.write("**Taxa de Juros M√©dia:** 30%")
            st.write("**Taxa de Aprova√ß√£o Esperada:** ~85%")
            
        with strategy_tabs[3]:  # Personalizada
            st.write("#### Estrat√©gia Personalizada")
            st.write("Configure seus pr√≥prios crit√©rios de aprova√ß√£o e taxa de juros:")
            
            # Configura√ß√µes personalizadas
            custom_very_low = st.checkbox("Aprovar Score Muito Baixo (0-300)", False)
            custom_low = st.checkbox("Aprovar Score Baixo (301-500)", False)
            custom_medium = st.checkbox("Aprovar Score M√©dio (501-700)", True)
            custom_high = st.checkbox("Aprovar Score Alto (701-850)", True)
            custom_very_high = st.checkbox("Aprovar Score Muito Alto (851-1000)", True)
            
            custom_interest = st.slider("Taxa de Juros M√©dia (%)", 10.0, 50.0, 25.0, 0.5)
            
            strategy_custom = {
                'nome': 'Personalizada',
                'muito_baixo': custom_very_low,
                'baixo': custom_low,
                'medio': custom_medium,
                'alto': custom_high,
                'muito_alto': custom_very_high,
                'taxa_juros': custom_interest
            }
            
            # Calcular taxa de aprova√ß√£o esperada
            approval_rate = 0
            if custom_very_low:
                approval_rate += score_very_low
            if custom_low:
                approval_rate += score_low
            if custom_medium:
                approval_rate += score_medium
            if custom_high:
                approval_rate += score_high
            if custom_very_high:
                approval_rate += score_very_high
                
            st.write(f"**Taxa de Aprova√ß√£o Esperada:** ~{approval_rate}%")
        
        # Bot√£o para comparar estrat√©gias
        if st.button("Comparar Estrat√©gias de Concess√£o"):
            # Lista com todas as estrat√©gias para compara√ß√£o
            strategies = [
                strategy_conservative,
                strategy_moderate,
                strategy_aggressive,
                strategy_custom
            ]
            
            # Dataframe para armazenar resultados
            results_data = []
            
            # Loop pelas estrat√©gias
            for strategy in strategies:
                # Calcular volumes e valores
                approved_very_low = applications_volume * (score_very_low / 100) if strategy['muito_baixo'] else 0
                approved_low = applications_volume * (score_low / 100) if strategy['baixo'] else 0
                approved_medium = applications_volume * (score_medium / 100) if strategy['medio'] else 0
                approved_high = applications_volume * (score_high / 100) if strategy['alto'] else 0
                approved_very_high = applications_volume * (score_very_high / 100) if strategy['muito_alto'] else 0
                
                total_approved = approved_very_low + approved_low + approved_medium + approved_high + approved_very_high
                approval_rate = (total_approved / applications_volume) * 100
                
                # Calcular valor da carteira e distribui√ß√£o
                portfolio_value = total_approved * average_ticket
                
                # Calcular inadimpl√™ncia esperada por faixa
                default_value_very_low = approved_very_low * average_ticket * (default_very_low / 100)
                default_value_low = approved_low * average_ticket * (default_low / 100)
                default_value_medium = approved_medium * average_ticket * (default_medium / 100)
                default_value_high = approved_high * average_ticket * (default_high / 100)
                default_value_very_high = approved_very_high * average_ticket * (default_very_high / 100)
                
                total_default_value = default_value_very_low + default_value_low + default_value_medium + default_value_high + default_value_very_high
                default_rate = (total_default_value / portfolio_value) * 100 if portfolio_value > 0 else 0
                
                # Calcular receita de juros
                interest_revenue = portfolio_value * (strategy['taxa_juros'] / 100)
                
                # Calcular resultado l√≠quido
                net_result = interest_revenue - total_default_value
                roi = (net_result / portfolio_value) * 100 if portfolio_value > 0 else 0
                
                # Adicionar dados aos resultados
                results_data.append({
                    'Estrat√©gia': strategy['nome'],
                    'Taxa de Aprova√ß√£o (%)': approval_rate,
                    'Solicita√ß√µes Aprovadas': total_approved,
                    'Valor da Carteira (R$)': portfolio_value,
                    'Taxa de Inadimpl√™ncia (%)': default_rate,
                    'Valor de Inadimpl√™ncia (R$)': total_default_value,
                    'Receita de Juros (R$)': interest_revenue,
                    'Resultado L√≠quido (R$)': net_result,
                    'ROI (%)': roi
                })
            
            # Criar DataFrame com resultados
            df_results = pd.DataFrame(results_data)
            
            # Exibir resultados
            st.write("## Resultados da Compara√ß√£o")
            
            # Gr√°fico de barras comparando as estrat√©gias
            fig = px.bar(
                df_results,
                x='Estrat√©gia',
                y='Resultado L√≠quido (R$)',
                color='ROI (%)',
                color_continuous_scale='RdYlGn',
                text_auto='.2s',
                title='Compara√ß√£o do Resultado L√≠quido por Estrat√©gia'
            )
            
            fig.update_layout(
                xaxis_title='Estrat√©gia de Concess√£o',
                yaxis_title='Resultado L√≠quido (R$)'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Tabela comparativa
            col1, col2 = st.columns([2, 1])
            
            with col1:
                # Gr√°fico de radar para compara√ß√£o de m√∫ltiplas m√©tricas
                metrics = ['Taxa de Aprova√ß√£o (%)', 'Taxa de Inadimpl√™ncia (%)', 'ROI (%)']
                
                fig = go.Figure()
                
                for i, strategy in enumerate(df_results['Estrat√©gia']):
                    values = df_results.loc[i, metrics].tolist()
                    # Adicionar o primeiro valor novamente para fechar o pol√≠gono
                    values.append(values[0])
                    
                    fig.add_trace(go.Scatterpolar(
                        r=values,
                        theta=metrics + [metrics[0]],  # Repetir a primeira categoria
                        fill='toself',
                        name=strategy
                    ))
                
                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, max(df_results[metrics].max()) * 1.1]
                        )
                    ),
                    title='Compara√ß√£o Multidimensional de Estrat√©gias',
                    showlegend=True
                )
                
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Mostrar m√©tricas-chave para a melhor estrat√©gia em termos de ROI
                best_strategy = df_results.loc[df_results['ROI (%)'].idxmax()]
                
                st.write("### Estrat√©gia √ìtima")
                st.success(f"**{best_strategy['Estrat√©gia']}**")
                
                st.metric("ROI", f"{best_strategy['ROI (%)']:.2f}%")
                st.metric("Resultado L√≠quido", f"R$ {best_strategy['Resultado L√≠quido (R$)']:,.2f}")
                st.metric("Taxa de Aprova√ß√£o", f"{best_strategy['Taxa de Aprova√ß√£o (%)']:.1f}%")
                st.metric("Taxa de Inadimpl√™ncia", f"{best_strategy['Taxa de Inadimpl√™ncia (%)']:.1f}%")
            
            # Tabela detalhada
            st.write("### Detalhamento por Estrat√©gia")
            
            # Formatar o DataFrame para exibi√ß√£o
            display_df = df_results.copy()
            
            # Formatar colunas num√©ricas
            money_cols = ['Valor da Carteira (R$)', 'Valor de Inadimpl√™ncia (R$)', 'Receita de Juros (R$)', 'Resultado L√≠quido (R$)']
            percent_cols = ['Taxa de Aprova√ß√£o (%)', 'Taxa de Inadimpl√™ncia (%)', 'ROI (%)']
            
            for col in money_cols:
                display_df[col] = display_df[col].apply(lambda x: f"R$ {x:,.2f}")
                
            for col in percent_cols:
                display_df[col] = display_df[col].apply(lambda x: f"{x:.2f}%")
                
            display_df['Solicita√ß√µes Aprovadas'] = display_df['Solicita√ß√µes Aprovadas'].apply(lambda x: f"{x:,.0f}")
            
            # Exibir tabela formatada
            st.dataframe(display_df, use_container_width=True)
            
            # Recomenda√ß√µes
            st.write("### Recomenda√ß√µes")
            
            recommendations = []
            
            # Identificar a estrat√©gia com maior ROI e volume
            best_roi_strategy = df_results.loc[df_results['ROI (%)'].idxmax(), 'Estrat√©gia']
            best_volume_strategy = df_results.loc[df_results['Solicita√ß√µes Aprovadas'].idxmax(), 'Estrat√©gia']
            
            if best_roi_strategy == best_volume_strategy:
                recommendations.append(f"- A estrat√©gia **{best_roi_strategy}** oferece o melhor equil√≠brio entre volume de aprova√ß√µes e rentabilidade.")
            else:
                recommendations.append(f"- Para maximizar rentabilidade (ROI), a estrat√©gia **{best_roi_strategy}** √© a mais indicada.")
                recommendations.append(f"- Para maximizar volume de aprova√ß√µes, a estrat√©gia **{best_volume_strategy}** √© a mais indicada.")
            
            # Avaliar estrat√©gias espec√≠ficas
            for i, row in df_results.iterrows():
                strategy_name = row['Estrat√©gia']
                roi = row['ROI (%)']
                default_rate = row['Taxa de Inadimpl√™ncia (%)']
                
                if roi < 0:
                    recommendations.append(f"- A estrat√©gia **{strategy_name}** apresenta ROI negativo. √â recomend√°vel revisar os crit√©rios de aprova√ß√£o ou aumentar as taxas de juros.")
                
                if default_rate > 25:
                    recommendations.append(f"- A estrat√©gia **{strategy_name}** apresenta taxa de inadimpl√™ncia muito elevada (>{default_rate:.1f}%). Considere crit√©rios mais rigorosos.")
            
            # Exibir recomenda√ß√µes
            for rec in recommendations:
                st.markdown(rec)
                
            # Adicionar op√ß√£o de download dos resultados
            csv = df_results.to_csv(index=False)
            st.download_button(
                label="Download dos Resultados (CSV)",
                data=csv,
                file_name="comparacao_estrategias.csv",
                mime="text/csv",
            )

    # Tab 3: Cen√°rios Econ√¥micos
    with portfolio_tab[2]:
        st.subheader("Simula√ß√£o de Cen√°rios Econ√¥micos")
        st.write("Teste como diferentes cen√°rios econ√¥micos podem afetar a inadimpl√™ncia e retorno de sua carteira.")
        
        # Configura√ß√£o da carteira atual
        st.write("### Configura√ß√£o da Carteira Base")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Valor da carteira
            portfolio_value = st.number_input(
                "Valor Total da Carteira (R$)",
                min_value=100000.0,
                max_value=100000000.0,
                value=10000000.0,
                step=1000000.0,
                format="%.2f"
            )
            
            # Taxa m√©dia de juros
            avg_interest_rate = st.slider(
                "Taxa M√©dia de Juros (%)",
                min_value=5.0,
                max_value=50.0,
                value=25.0,
                step=0.5
            )
            
            # Taxa atual de inadimpl√™ncia
            current_default_rate = st.slider(
                "Taxa Atual de Inadimpl√™ncia (%)",
                min_value=1.0,
                max_value=30.0,
                value=8.0,
                step=0.5
            )
        
        with col2:
            # Distribui√ß√£o da carteira por segmento de risco
            st.write("**Distribui√ß√£o por Segmento de Risco:**")
            
            segment_low_risk = st.slider("Baixo Risco (%)", 0, 100, 30, 5)
            segment_medium_risk = st.slider("M√©dio Risco (%)", 0, 100, 40, 5)
            segment_high_risk = st.slider("Alto Risco (%)", 0, 100, 30, 5)
            
            # Verificar se a soma √© 100%
            total_segments = segment_low_risk + segment_medium_risk + segment_high_risk
            if total_segments != 100:
                st.warning(f"A soma dos percentuais deve ser 100%. Atualmente: {total_segments}%")
        
        # Cen√°rios econ√¥micos
        st.write("### Cen√°rios Econ√¥micos")
        st.write("Configure diferentes cen√°rios econ√¥micos e seus impactos na inadimpl√™ncia:")
        
        # Tabs para diferentes cen√°rios
        scenario_tabs = st.tabs(["Cen√°rio Base", "Otimista", "Pessimista", "Crise", "Personalizado"])
        
        # Definir cen√°rios e seus impactos
        with scenario_tabs[0]:
            st.write("#### Cen√°rio Base (Atual)")
            st.write("Mant√©m as condi√ß√µes econ√¥micas atuais, sem mudan√ßas significativas.")
            
            scenario_base = {
                'nome': 'Base',
                'descricao': 'Condi√ß√µes econ√¥micas atuais',
                'multiplicador_baixo': 1.0,
                'multiplicador_medio': 1.0,
                'multiplicador_alto': 1.0,
                'variacao_pib': 1.5,
                'variacao_desemprego': 0.0,
                'variacao_juros': 0.0
            }
            
if __name__ == '__main__':
    # Executar a aplica√ß√£o
    try:
        # Configura√ß√£o j√° feita no in√≠cio do arquivo
        # Remover qualquer outra configura√ß√£o duplicada
        
        # Mostrar o m√≥dulo correspondente √† sele√ß√£o
        if app_mode == "Previs√£o de Fluxo de Caixa":
            # O c√≥digo para este m√≥dulo j√° est√° definido acima
            pass  # N√£o precisamos adicionar nada aqui, o m√≥dulo j√° est√° definido
        # Os outros m√≥dulos continuam funcionando normalmente
    except Exception as e:
        st.error(f"Erro ao executar a aplica√ß√£o: {e}")
        st.exception(e)
